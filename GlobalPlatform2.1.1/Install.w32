Pre-requisite:

This will be a lot of work ...

1.	You need a Microsoft C/C++-Compiler including the libraries, includes and build tools.
	You may use the compiler included in Visual Studio 6.0, Microsoft Visual Studio .NET 2003 or 
	Visual Studio 2005. If you have Cygwin installed you can also also use it. See the file 
	INSTALL for the compilation.
	Obey, that you will have problems with the portability on older (rather old) systems if you 
	use newer compiler suites, i.e. on systems without a installed .NET framework some libraries l
	inked against are missing.

	For a free way to build you need:

	Visual C++ 2005 Express Edition
	http://msdn.microsoft.com/vstudio/express/visualc/default.aspx

	to get a C/C++ compiler suite.

	Windows® Server 2003 R2 Platform SDK
	http://www.microsoft.com/downloads/details.aspx?FamilyId=484269E2-3B89-47E3-8EB7-1F2BE6D7123A&displaylang=en1

	to get the libraries for linking and include files for compiling and nmake for the makefile.

	Follow these steps to integrate the Platform SDK into Visual C++ 2005 Express:
	http://msdn.microsoft.com/vstudio/express/visualc/usingpsdk/

2.	You need OpenSSL. Download it from http://www.openssl.org/ and
	build the library. A prebuild package is enough.
	The headers and the linker libraries ssleay32.lib and
	libeay32.lib must be available. The libeay32.dll and ssleay32.dll must be installed in a
	common library search path, e.g. Windows/System32.

3.	You need the zlib library. Download it from http://www.zlib.net/ and build the
	library. A prebuild package is enough. The headers and the linker library 
	zddl.lib must be available. The zlib1.dll must be installed in a common library search path,
	e.g. Windows/System32.

4.	You need Doxygen for generating the documentation.
	www.doxygen.org/

Installation:

Important for Windows is that applications linked against GlobalPlatform must use the UNICODE and _UNICODE switch.
Otherwise the application will crash, because the GlobalPlatform Library is compiled with Unicode support.
Keep in mind, that all applications should be compiled and linked with the same debugging properties
and against the same libraries.

You can also use the .sln file for Visual C++ 2005 Express Edition (may also work under the full version).
For VS 2003 you must rename the files GlobalPlatform.sln.old to GlobalPlatform.sln 
and GlobalPlatform.vcproj.7.10.old to GlobalPlatform.vcproj and use them together.
Then you have to adjust the C/C++->General->Additional Include Directories, 
Linker->General->Additional Library Directories, Linker->Input->Additional Dependencies and 
Resources->General->Additional Include Directories fields.

1.	Set the environment (This are include files and libraries and programms of the building environment)
	for compilation and open a command prompt. If you have Microsoft Visual Studio 6.0
	or .NET 2003 (or Visual Studio 2005) there is a file vcvars32.bat which does this for you
	and opens a command prompt. There could also be a link in the Start menu of Windows.
	If you have installed Microsoft Visual C++ 2005 Express Edition and the
	Windows Server 2003 R2 Platform SDK then change into the Platform SDK directory, open a
	console and run the SetEnv.Cmd (or use a link for your target environment in the Start menu of Windows). 
	Now change into the Microsoft Visual C++ 2005 Express Edition VC\bin subdirectory and run vcvars32.bat. 
	Now you should have a environment with the necessary tools, include and library directories.

2. 	Change into this directory.

3. 	Run nmake -f Makefile.mak to build a release version without debugging information.
	or run nmake -f Makefile.mak DEBUG= to build a debug version with debugging information.
	There are some arguments which are displayed in the beginning of the makefile. You
	can change them if you specify them on the command line or in the makefile.

	This arguments are:

	OPENSSL_INC   - The path to the headers of OpenSSL
	OPENSSL_LIB   - The path to the link library (.lib) of OpenSSL
	ZLIB_INC  	  - The path to the headers of zlib
	ZLIB_LIB  	  - The path to the link library (.lib) of zlib

	E.g. nmake -f Makefile.mak OPENSSL_INC=C:\openssl-0.9.7e\include
	OPENSSL_LIB=C:\openssl-0.9.7e\out32dll ZLIB_INC=C:\zlib123-dll\include
	ZLIB_LIB=C:\zlib123-dll\lib

4.	Copy the GlobalPlatform.dll library from the Release or Debug directory to a location,
	where the application(s) using it can find it. This is a directory included in the
	%PATH% environment, usually at least e.g. Windows\System32
	You may also need the GlobalPlatform.lib from the appropriate directory
	if your are linking applications against the library.

5.	Build the documentation with nmake -f Makefile.mak doc

	Argument for the Makefile is

	DOXYGEN   - The location of the executable including the
	executable name of Doxygen

6.	(optional)
	Run nmake -f Makefile.mak clean to delete the Debug and Release directories.

If you need to get debugging output you must have built a debug version
and enable the debugging by setting the environment variable
GLOBALPLATFORM_DEBUG=1. If you explicitly set a log file with
the environment variable GLOBALPLATFORM_LOGFILE, this log file will be used.
The default log file is C:\Temp\GlobalPlatform.log. This must be writable for 
the user. Keep in mind that the debugging output may contain sensitive 
information, e.g. keys!

For more information visit:

http://sourceforge.net/projects/globalplatform/