# Require autoconf 2.52
AC_PREREQ(2.52)

AC_INIT(GPShell, 1.3.1, snitmo@gmail.com)
AC_CONFIG_AUX_DIR(myaux)
AC_COPYRIGHT(COPYING)

AC_CANONICAL_HOST

AM_INIT_AUTOMAKE([no-define])

# check programs
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL

# check header files
AC_HEADER_STDC
AC_HEADER_STAT
AC_CHECK_HEADER(stdio.h, , [],
[AC_MSG_ERROR([stdio.h not found.])])
AC_CHECK_HEADER(fcntl.h, , [],
[AC_MSG_ERROR([fcntl.h not found.])])
AC_CHECK_HEADER(io.h, , [],
[AC_MSG_ERROR([io.h not found.])])

# check library functions
AC_FUNC_STAT
AC_FUNC_MALLOC
AC_CHECK_FUNCS(atoi fgets, [],
[AC_MSG_ERROR([Necessary function is not supported.])])


AC_ARG_VAR(WINSCARD_LIB_PATH, [Specifies the location of WinSCard.lib for Windows])

# Windows must be handled different
case "$host" in
*-*-cygwin*)
	if ! test -f "$WINSCARD_LIB_PATH"/WinSCard.lib;
	  then AC_MSG_ERROR([WinSCard.lib not found, specify location of WinSCard.lib with
	./configure WINSCARD_LIB_PATH=<library directory>])
	fi
	AC_SUBST(PCSCLITE_LIBS,-L"$WINSCARD_LIB_PATH")
  ;;
*)
    PKG_CHECK_MODULES(PCSCLITE, libpcsclite >= 1.2.9-beta7, [],
      [ if test -f /usr/local/lib/pkgconfig/libpcsclite.pc ; then
        AC_MSG_ERROR([install pkg-config or set PKG_CONFIG_PATH to pkgconfig directory])
          else
                AC_MSG_WARN([install pcsc-lite 1.2.9-beta7 or later])
          fi
      ]
    )
  ;;
esac



AC_ARG_VAR(PCSCLITE_H_PATH, [Specifies the location of pcsclite.h for Windows])

OLD_CFLAGS="$CFLAGS"
case "$host" in
*-*-cygwin*)
	if ! test -f "$PCSCLITE_H_PATH/pcsclite.h";
	  then AC_MSG_ERROR([pcsclite.h not found, specify location of pcsclite.h with
	./configure PCSCLITE_H_PATH=<include directory>])
	fi
	AC_SUBST(PCSCLITE_CFLAGS,-I"$PCSCLITE_H_PATH")
  ;;
  *)
    CFLAGS="$CFLAGS $PCSCLITE_CFLAGS"
    AC_CHECK_HEADER(winscard.h, [],
  	  [AC_MSG_ERROR([winscard.h not found or usable, install pcsc-lite 1.2.9-beta7
    or later, or use ./configure PCSCLITE_CFLAGS=-I<include directory>])])
  ;;
esac
CFLAGS="$OLD_CFLAGS"



AC_ARG_ENABLE(debug,
[  --enable-debug          enable debug messages from GPShell application.],
[ case "${enableval}" in
  yes)
    debug=true ;;
  no)
    debug=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
 esac], [debug=false])

if test x${debug} = xtrue ; then
  AC_DEFINE(DEBUG, 1, [enable full debug messaging.])
fi

AC_ARG_VAR(GLOBALPLATFORM_H_PATH, [Specifies the location of GlobalPlatform/GlobalPlatform.h])

OLD_CFLAGS="$CFLAGS"
case "$host" in
*-*-cygwin*)
	if ! test -f "$GLOBALPLATFORM_H_PATH"/GlobalPlatform/GlobalPlatform.h;
	  then AC_MSG_ERROR([GlobalPlatform/GlobalPlatform.h not found, specify location of
    GlobalPlatform/GlobalPlatform.h with ./configure GLOBALPLATFORM_H_PATH=<directory>])
	fi
  ;;
*)
  CFLAGS="$CFLAGS -I$GLOBALPLATFORM_H_PATH"
  AC_CHECK_HEADER(GlobalPlatform/GlobalPlatform.h, [],
  [AC_MSG_ERROR([GlobalPlatform/GlobalPlatform.h not found or usable, install GlobalPlatform 3.0.2
    or later, or use ./configure GLOBALPLATFORM_H_PATH=<include directory>])], )
  ;;
esac
AC_SUBST(GLOBALPLATFORM_CFLAGS,-I"$GLOBALPLATFORM_H_PATH")
CFLAGS="$OLD_CFLAGS"



AC_ARG_VAR(GLOBALPLATFORM_LIB_PATH, [Specifies the location of GlobalPlatform library])

OLD_LDFLAGS="$LDFLAGS"
case "$host" in
*-*-cygwin*)
	if ! test -f "$GLOBALPLATFORM_LIB_PATH"/GlobalPlatform.lib;
	  then AC_MSG_ERROR([GlobalPlatform.lib not found, specify location of
    GlobalPlatform.lib with ./configure GLOBALPLATFORM_LIB_PATH=<directory>])
	fi
  ;;
*)
  LDFLAGS="$LDFLAGS -L$GLOBALPLATFORM_LIB_PATH"
  AC_CHECK_LIB(GlobalPlatform, GemXpressoPro_create_daughter_keys, [],
    [AC_MSG_ERROR([GemXpressoPro_create_daughter_keys() not found, install GlobalPlatform 3.0.2 or
    later, or use ./configure GLOBALPLATFORM_LIB_PATH=<library directory>])])
  ;;
esac
LDFLAGS="$OLD_LDFLAGS"


AC_MSG_RESULT([Debug output enabled                  : $debug])

AC_OUTPUT([
Makefile
])

