/*
 * DeleteJPanel.java
 *
 * Created on 21. Februar 2005, 09:26
 */

package org.dyndns.widerstand.openplatformmanager;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import javax.swing.*;
import org.dyndns.widerstand.OpenPlatform.*;
import java.util.*;

/**
 *
 * @author  Widerstand
 */
public class DeleteJPanel extends javax.swing.JPanel {
    
    private MainJFrame parent;
    private ArrayList<JCheckBox> checkBoxList = new ArrayList<JCheckBox>(10);
    private SwingUtil swingUtil;
    private javax.swing.JPanel jPanelAllApplications;
    private javax.swing.JPanel jPanelApplications;
    private javax.swing.JPanel jPanelCardManager;
    private javax.swing.JPanel jPanelExecutableLoadFile;
    private javax.swing.JPanel jPanelSecurityDomains;
    private javax.swing.JPanel jPanelInstalledContent;
    
    /** Creates new form DeleteJPanel */
    public DeleteJPanel(MainJFrame parent) {
        this.parent = parent;
        swingUtil = new SwingUtil();
        initComponents();
    }
    
    private void initConditionalComponents() {
        if (jPanelInstalledContent != null)
            jPanel8.remove(jPanelInstalledContent);
        java.awt.GridBagConstraints gridBagConstraints;
        jPanelInstalledContent = new javax.swing.JPanel();
        jPanelCardManager = new javax.swing.JPanel();
        jPanelExecutableLoadFile = new javax.swing.JPanel();
        jPanelAllApplications = new javax.swing.JPanel();
        jPanelSecurityDomains = new javax.swing.JPanel();
        jPanelApplications = new javax.swing.JPanel();
        jPanelInstalledContent.setLayout(new javax.swing.BoxLayout(jPanelInstalledContent, javax.swing.BoxLayout.Y_AXIS));
        
        jPanelCardManager.setLayout(new java.awt.GridLayout(0, 5));
        
        jPanelCardManager.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Card Manager"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanelCardManager.setMinimumSize(new java.awt.Dimension(600, 36));
        jPanelCardManager.setPreferredSize(new java.awt.Dimension(600, 36));
        jPanelInstalledContent.add(jPanelCardManager);
        
        jPanelExecutableLoadFile.setLayout(new java.awt.GridLayout(0, 4));
        
        jPanelExecutableLoadFile.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Executable Load Files"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanelInstalledContent.add(jPanelExecutableLoadFile);
        
        jPanelAllApplications.setLayout(new javax.swing.BoxLayout(jPanelAllApplications, javax.swing.BoxLayout.Y_AXIS));
        
        jPanelAllApplications.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Applications"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanelSecurityDomains.setLayout(new java.awt.GridLayout(0, 5));
        
        jPanelSecurityDomains.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Security Domains"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanelAllApplications.add(jPanelSecurityDomains);
        
        jPanelApplications.setLayout(new java.awt.GridLayout(0, 5));
        
        jPanelApplications.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Applications"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanelAllApplications.add(jPanelApplications);
        
        jPanelInstalledContent.add(jPanelAllApplications);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jPanelInstalledContent, gridBagConstraints);
    }

    private void removeConditionalComponents() {
        if (jPanelInstalledContent != null)
            jPanel8.remove(jPanelInstalledContent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabelAID = new javax.swing.JLabel();
        jTextFieldAID = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.CompoundBorder(null, new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Delete Application"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)))));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setAlignmentY(0.0F);
        jButton1.setText("Delete Application(s)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jPanel6, gridBagConstraints);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Application AID"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelAID.setText("AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel9.add(jLabelAID, gridBagConstraints);

        jTextFieldAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel9.add(jTextFieldAID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jPanel9, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel8);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        byte[][] AIDs;
        int i=0;
        swingUtil.resetJComponentColor();
        if (jTextFieldAID.getText().length() > 0) {
            try {
                AIDs = new byte[1][];
                AIDs[0] = OPSPUtil.bytesFromHexString(jTextFieldAID.getText());
            } catch (NumberFormatException e) {
                swingUtil.errorInJComponent(this, jTextFieldAID,
                        "Colored text field cannot be understood as AID", "Wrong Number Format");
                return;
            }
        } else {
            for (int j=0; j<checkBoxList.size(); j++) {
                if (((JCheckBox)checkBoxList.get(j)).isSelected()) i++;
            }
            AIDs = new byte[i][];
            i=0;
            byte[] AID;
            for (int j=0; j<checkBoxList.size(); j++) {
                JCheckBox checkBox = (JCheckBox)checkBoxList.get(j);
                if (checkBox.isSelected()) {
                    AID = OPSPUtil.bytesFromHexString(checkBox.getText());
                    AIDs[i++] = AID;
                }
            }
        }
        int approve = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want delete the application(s)?",
                "Delete confirmation", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
        if (approve != javax.swing.JOptionPane.YES_OPTION)
            return;
        
        try {
            Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                    OPSPCardConnectionInfo.class, byte[][].class};
                    Object parameters[] = new Object[] {parent.session.cardHandle,
                            parent.session.secInfo, parent.session.cardInfo,
                            AIDs};
                            
                            OPSPReceiptData receiptData[] = (OPSPReceiptData[])WaitForMethodJDialog.showDialog(parent,
                                    "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "deleteApplet", null, parameterTypes, parameters);
                            if (receiptData != null) {
                                for (int j=0; j < receiptData.length; j++) {
                                    final JFileChooser fc = new JFileChooser();
                                    int ret = fc.showSaveDialog(this);
                                    if (ret == JFileChooser.APPROVE_OPTION) {
                                        try {
                                            File file = fc.getSelectedFile();
                                            OPSPUtil.saveOPSPReceiptData(file, receiptData[j]);
                                        } catch (IOException e) {
                                            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                                                    "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                            parent.refreshStatus();
                                            return;
                                        }
                                    }
                                }
                            }
                            
        } catch (Exception e) {
            for (int j=0; j<AIDs.length; j++) {
                byte[][] AIDsTemp = new byte[1][];
                AIDsTemp[0] = AIDs[j];
                try {
                    Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                            OPSPCardConnectionInfo.class, byte[][].class};
                            Object parameters[] = new Object[] {parent.session.cardHandle,
                                    parent.session.secInfo, parent.session.cardInfo,
                                    AIDsTemp};
                                    
                                    OPSPReceiptData receiptData[] = (OPSPReceiptData[])WaitForMethodJDialog.showDialog(parent,
                                            "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "deleteApplet", null, parameterTypes, parameters);
                                    if (receiptData != null) {
                                        for (int k=0; k < receiptData.length; k++) {
                                            final JFileChooser fc = new JFileChooser();
                                            int ret = fc.showSaveDialog(this);
                                            if (ret == JFileChooser.APPROVE_OPTION) {
                                                try {
                                                    File file = fc.getSelectedFile();
                                                    OPSPUtil.saveOPSPReceiptData(file, receiptData[k]);
                                                } catch (IOException ex) {
                                                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(),
                                                            "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                    parent.refreshStatus();
                                                    return;
                                                }
                                            }
                                        }
                                    }
                } catch (OPSPException ex) {
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(),
                            "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    parent.refreshStatus();
                    return;
                } catch (Exception ex) {
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    parent.refreshStatus();
                    return;
                }
            }
        }
        parent.refreshStatus();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void refresh() {
        if (Arrays.equals(parent.session.selectedApplication, OPSPApplet.OPSP_CARD_MANAGER_AID)) {
            initConditionalComponents();
            JCheckBox checkBox;
            jPanelCardManager.removeAll();
            jPanelExecutableLoadFile.removeAll();
            jPanelSecurityDomains.removeAll();
            jPanelApplications.removeAll();
            jPanelAllApplications.removeAll();
            jPanelInstalledContent.removeAll();
            checkBoxList.clear();
            if (!parent.session.cardManager.isEmpty()) {
                jPanelCardManager.setPreferredSize(null);
                jPanelCardManager.setMinimumSize(null);
            } else {
                Dimension dim = new Dimension(600, 36);
                jPanelCardManager.setPreferredSize(dim);
                jPanelCardManager.setMinimumSize(dim);
            }
            for (OPSPApplicationData appData : parent.session.cardManager) {
                checkBox = new JCheckBox(OPSPUtil.toHexString(appData.getAID()));
                jPanelCardManager.add(checkBox);
                checkBoxList.add(checkBox);
            }
            for (OPSPApplicationData appData : parent.session.loadFiles) {
                checkBox = new JCheckBox(OPSPUtil.toHexString(appData.getAID()));
                jPanelExecutableLoadFile.add(checkBox);
                checkBoxList.add(checkBox);
            }
            for (OPSPApplicationData appData : parent.session.securityDomains) {
                checkBox = new JCheckBox(OPSPUtil.toHexString(appData.getAID()));
                jPanelSecurityDomains.add(checkBox);
                checkBoxList.add(checkBox);
            }
            for (OPSPApplicationData appData : parent.session.applications) {
                checkBox = new JCheckBox(OPSPUtil.toHexString(appData.getAID()));
                jPanelApplications.add(checkBox);
                checkBoxList.add(checkBox);
            }
            jPanel8.revalidate();
        }
        else {
            removeConditionalComponents();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabelAID;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldAID;
    // End of variables declaration//GEN-END:variables
    
}
