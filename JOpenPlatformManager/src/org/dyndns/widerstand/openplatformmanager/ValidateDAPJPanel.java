/*
 * ValidateDAPJPanel.java
 *
 * Created on 9. März 2005, 03:17
 */

package org.dyndns.widerstand.openplatformmanager;

import javax.swing.JFileChooser;
import org.dyndns.widerstand.OpenPlatform.*;
import java.io.*;

/**
 *
 * @author  Widerstand
 */
public class ValidateDAPJPanel extends javax.swing.JPanel {
    
    private MainJFrame parent;
    private SwingUtil swingUtil;
    
    /** Creates new form ValidateDAPJPanel */
    public ValidateDAPJPanel(MainJFrame parent) {
        this.parent = parent;
        swingUtil = new SwingUtil();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelconfirmationCounter = new javax.swing.JLabel();
        jTextFieldconfirmationCounter = new javax.swing.JTextField();
        jLabelcardUniqueData = new javax.swing.JLabel();
        jTextFieldcardUniqueData = new javax.swing.JTextField();
        jLabelReceiptData = new javax.swing.JLabel();
        jButtonLoadReceiptData = new javax.swing.JButton();
        jTextFieldReceiptData = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabelreceiptGenerationKey = new javax.swing.JLabel();
        jPasswordFieldreceiptGenerationKey = new javax.swing.JPasswordField();
        jCheckBoxreceiptGenerationKey = new javax.swing.JCheckBox();
        jButtonreceiptGenerationKey = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabelpackageAIDLoad = new javax.swing.JLabel();
        jLabelsecurityDomainAID = new javax.swing.JLabel();
        jTextFieldsecurityDomainAID = new javax.swing.JTextField();
        jTextFieldpackageAIDLoad = new javax.swing.JTextField();
        jButtonvalidateLoad = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButtonvalidateInstall = new javax.swing.JButton();
        jTextFieldpackageAIDInstall = new javax.swing.JTextField();
        jTextFieldappletInstanceAID = new javax.swing.JTextField();
        jLabelappletInstanceAID = new javax.swing.JLabel();
        jLabelpackageAIDInstall = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabelpackageAIDDelete = new javax.swing.JLabel();
        jTextFieldpackageAIDDelete = new javax.swing.JTextField();
        jButtonvalidateDelete = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Validate Receipt DAP"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Common Data"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelconfirmationCounter.setText("Confirmation Counter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabelconfirmationCounter, gridBagConstraints);

        jTextFieldconfirmationCounter.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jTextFieldconfirmationCounter, gridBagConstraints);

        jLabelcardUniqueData.setText("Card Unique Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabelcardUniqueData, gridBagConstraints);

        jTextFieldcardUniqueData.setColumns(29);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jTextFieldcardUniqueData, gridBagConstraints);

        jLabelReceiptData.setText("Receipt Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabelReceiptData, gridBagConstraints);

        jButtonLoadReceiptData.setText("Select File");
        jButtonLoadReceiptData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadReceiptDataActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jButtonLoadReceiptData, gridBagConstraints);

        jTextFieldReceiptData.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jTextFieldReceiptData, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Receipt Generation Key"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelreceiptGenerationKey.setText("Receipt Generation Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelreceiptGenerationKey, gridBagConstraints);

        jPasswordFieldreceiptGenerationKey.setColumns(47);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPasswordFieldreceiptGenerationKey, gridBagConstraints);

        jCheckBoxreceiptGenerationKey.setText("Display as Cleartext");
        jCheckBoxreceiptGenerationKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxreceiptGenerationKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxreceiptGenerationKey, gridBagConstraints);

        jButtonreceiptGenerationKey.setText("Load Key");
        jButtonreceiptGenerationKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonreceiptGenerationKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jButtonreceiptGenerationKey, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Load Receipt"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelpackageAIDLoad.setText("Package AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jLabelpackageAIDLoad, gridBagConstraints);

        jLabelsecurityDomainAID.setText("Security Domain AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jLabelsecurityDomainAID, gridBagConstraints);

        jTextFieldsecurityDomainAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jTextFieldsecurityDomainAID, gridBagConstraints);

        jTextFieldpackageAIDLoad.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jTextFieldpackageAIDLoad, gridBagConstraints);

        jButtonvalidateLoad.setText("Validate");
        jButtonvalidateLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonvalidateLoadActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jButtonvalidateLoad, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Install Receipt"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonvalidateInstall.setText("Validate");
        jButtonvalidateInstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonvalidateInstallActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtonvalidateInstall, gridBagConstraints);

        jTextFieldpackageAIDInstall.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jTextFieldpackageAIDInstall, gridBagConstraints);

        jTextFieldappletInstanceAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jTextFieldappletInstanceAID, gridBagConstraints);

        jLabelappletInstanceAID.setText("Applet Instance AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jLabelappletInstanceAID, gridBagConstraints);

        jLabelpackageAIDInstall.setText("Package AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jLabelpackageAIDInstall, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Delete Receipt"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelpackageAIDDelete.setText("Package AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabelpackageAIDDelete, gridBagConstraints);

        jTextFieldpackageAIDDelete.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldpackageAIDDelete, gridBagConstraints);

        jButtonvalidateDelete.setText("Validate");
        jButtonvalidateDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonvalidateDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jButtonvalidateDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel6, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void jButtonvalidateDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonvalidateDeleteActionPerformed
        swingUtil.resetJComponentColor();
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAIDDelete.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAIDDelete,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        long confirmationCounter;
        try {
            confirmationCounter = Long.decode(jTextFieldconfirmationCounter.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldconfirmationCounter,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        byte[] cardUniqueData;
        try {
            cardUniqueData = OPSPUtil.bytesFromHexString(jTextFieldcardUniqueData.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldcardUniqueData,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        byte[] receiptGenerationKey;
        try {
            receiptGenerationKey = OPSPUtil.bytesFromHexString(new String(jPasswordFieldreceiptGenerationKey.getPassword()));
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jPasswordFieldreceiptGenerationKey,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        OPSPReceiptData receiptData;
        try {
            receiptData = OPSPUtil.loadOPSPReceiptData(jTextFieldReceiptData.getText());
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldReceiptData,
                    e.getMessage(), "I/O Error");
            return;
        }
        boolean identical = false;
        try {
            identical = OPSPWrapper.validateDeleteReceipt(confirmationCounter, cardUniqueData,
                    receiptGenerationKey, receiptData, packageAID);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (identical) {
            javax.swing.JOptionPane.showMessageDialog(this, "Delete Receipt is valid.", "Open Platform Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Delete Receipt is NOT valid.", "Open Platform Warning",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonvalidateDeleteActionPerformed
    
    private void jButtonvalidateInstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonvalidateInstallActionPerformed
        swingUtil.resetJComponentColor();
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAIDInstall.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAIDInstall,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] appletInstanceAID;
        try {
            appletInstanceAID = OPSPUtil.bytesFromHexString(jTextFieldappletInstanceAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstanceAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        long confirmationCounter;
        try {
            confirmationCounter = Long.decode(jTextFieldconfirmationCounter.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldconfirmationCounter,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        byte[] cardUniqueData;
        try {
            cardUniqueData = OPSPUtil.bytesFromHexString(jTextFieldcardUniqueData.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldcardUniqueData,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        byte[] receiptGenerationKey;
        try {
            receiptGenerationKey = OPSPUtil.bytesFromHexString(new String(jPasswordFieldreceiptGenerationKey.getPassword()));
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jPasswordFieldreceiptGenerationKey,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        OPSPReceiptData receiptData;
        try {
            receiptData = OPSPUtil.loadOPSPReceiptData(jTextFieldReceiptData.getText());
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldReceiptData,
                    e.getMessage(), "I/O Error");
            return;
        }
        boolean identical = false;
        try {
            identical = OPSPWrapper.validateInstallReceipt(confirmationCounter, cardUniqueData,
                    receiptGenerationKey, receiptData, packageAID, appletInstanceAID);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (identical) {
            javax.swing.JOptionPane.showMessageDialog(this, "Install Receipt is valid.", "Open Platform Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Install Receipt is NOT valid.", "Open Platform Warning",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonvalidateInstallActionPerformed
    
    private void jButtonvalidateLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonvalidateLoadActionPerformed
        swingUtil.resetJComponentColor();
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAIDLoad.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAIDLoad,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] securityDomainAID;
        try {
            securityDomainAID = OPSPUtil.bytesFromHexString(jTextFieldsecurityDomainAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldsecurityDomainAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        long confirmationCounter;
        try {
            confirmationCounter = Long.decode(jTextFieldconfirmationCounter.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldconfirmationCounter,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        byte[] cardUniqueData;
        try {
            cardUniqueData = OPSPUtil.bytesFromHexString(jTextFieldcardUniqueData.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldcardUniqueData,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        byte[] receiptGenerationKey;
        try {
            receiptGenerationKey = OPSPUtil.bytesFromHexString(new String(jPasswordFieldreceiptGenerationKey.getPassword()));
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jPasswordFieldreceiptGenerationKey,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        OPSPReceiptData receiptData;
        try {
            receiptData = OPSPUtil.loadOPSPReceiptData(jTextFieldReceiptData.getText());
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldReceiptData,
                    e.getMessage(), "I/O Error");
            return;
        }
        boolean identical = false;
        try {
            identical = OPSPWrapper.validateLoadReceipt(confirmationCounter, cardUniqueData,
                    receiptGenerationKey, receiptData, packageAID, securityDomainAID);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (identical) {
            javax.swing.JOptionPane.showMessageDialog(this, "Load Receipt is valid.", "Open Platform Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Load Receipt is NOT valid.", "Open Platform Warning",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonvalidateLoadActionPerformed
    
    private void jCheckBoxreceiptGenerationKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxreceiptGenerationKeyActionPerformed
        if (jCheckBoxreceiptGenerationKey.isSelected())
            jPasswordFieldreceiptGenerationKey.setEchoChar('\0');
        else
            jPasswordFieldreceiptGenerationKey.setEchoChar('*');
    }//GEN-LAST:event_jCheckBoxreceiptGenerationKeyActionPerformed
    
    private void jButtonreceiptGenerationKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonreceiptGenerationKeyActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        byte receiptGenerationKey[];
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                receiptGenerationKey = OPSPUtil.load3DES(fc.getSelectedFile());
                jPasswordFieldreceiptGenerationKey.setText(OPSPUtil.toHexString(receiptGenerationKey));
            } catch (IOException e) {
                swingUtil.errorInJComponent(this, jPasswordFieldreceiptGenerationKey,
                        e.getMessage(), "I/O Error");
            }
        }
    }//GEN-LAST:event_jButtonreceiptGenerationKeyActionPerformed
    
    private void jButtonLoadReceiptDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadReceiptDataActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        byte receipt[];
        if (ret == JFileChooser.APPROVE_OPTION) {
            jTextFieldReceiptData.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonLoadReceiptDataActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLoadReceiptData;
    private javax.swing.JButton jButtonreceiptGenerationKey;
    private javax.swing.JButton jButtonvalidateDelete;
    private javax.swing.JButton jButtonvalidateInstall;
    private javax.swing.JButton jButtonvalidateLoad;
    private javax.swing.JCheckBox jCheckBoxreceiptGenerationKey;
    private javax.swing.JLabel jLabelReceiptData;
    private javax.swing.JLabel jLabelappletInstanceAID;
    private javax.swing.JLabel jLabelcardUniqueData;
    private javax.swing.JLabel jLabelconfirmationCounter;
    private javax.swing.JLabel jLabelpackageAIDDelete;
    private javax.swing.JLabel jLabelpackageAIDInstall;
    private javax.swing.JLabel jLabelpackageAIDLoad;
    private javax.swing.JLabel jLabelreceiptGenerationKey;
    private javax.swing.JLabel jLabelsecurityDomainAID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPasswordField jPasswordFieldreceiptGenerationKey;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldReceiptData;
    private javax.swing.JTextField jTextFieldappletInstanceAID;
    private javax.swing.JTextField jTextFieldcardUniqueData;
    private javax.swing.JTextField jTextFieldconfirmationCounter;
    private javax.swing.JTextField jTextFieldpackageAIDDelete;
    private javax.swing.JTextField jTextFieldpackageAIDInstall;
    private javax.swing.JTextField jTextFieldpackageAIDLoad;
    private javax.swing.JTextField jTextFieldsecurityDomainAID;
    // End of variables declaration//GEN-END:variables
    
}
