/*
 * InstallJPanel.java
 *
 * Created on 13. Februar 2005, 03:23
 */

package org.dyndns.widerstand.openplatformmanager;

import javax.swing.*;
import java.io.File;
import org.dyndns.widerstand.OpenPlatform.*;
import java.io.*;

/**
 *
 * @author Karsten Ohme
 */
public class InstallJPanel extends javax.swing.JPanel {
    
    private MainJFrame parent;
    private SwingUtil swingUtil;
    
    /** Creates new form InstallJPanel */
    public InstallJPanel(MainJFrame parent) {
        this.parent = parent;
        swingUtil = new SwingUtil();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonCAPFile = new javax.swing.JButton();
        jLabelappletInstallParameters = new javax.swing.JLabel();
        jTextFieldappletClassAID = new javax.swing.JTextField();
        jTextFieldpackageAID = new javax.swing.JTextField();
        jLabelappletClassAID = new javax.swing.JLabel();
        jLabelsecurityDomainAID = new javax.swing.JLabel();
        jLabelCAPFile = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION = new javax.swing.JCheckBox();
        jLabelpackageAID = new javax.swing.JLabel();
        jLabelappletInstanceAID = new javax.swing.JLabel();
        jTextFieldappletInstallParameters = new javax.swing.JTextField();
        jTextFieldappletInstanceAID = new javax.swing.JTextField();
        jTextFieldCAPFile = new javax.swing.JTextField();
        jComboBoxsecurityDomainAID = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jLabelnonVolatileCodeSpaceLimit = new javax.swing.JLabel();
        jLabelnonVolatileDataSpaceLimit = new javax.swing.JLabel();
        jLabelvolatileDataSpaceLimit = new javax.swing.JLabel();
        jTextFieldnonVolatileCodeSpaceLimitForLoad = new javax.swing.JTextField();
        jTextFieldnonVolatileDataSpaceLimitForLoad = new javax.swing.JTextField();
        jTextFieldvolatileDataSpaceLimitForLoad = new javax.swing.JTextField();
        jTextFieldnonVolatileCodeSpaceLimitForInstall = new javax.swing.JTextField();
        jTextFieldnonVolatileDataSpaceLimitForInstall = new javax.swing.JTextField();
        jTextFieldvolatileDataSpaceLimitForInstall = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButtonAddDAP = new javax.swing.JButton();
        jComboBoxDAP = new javax.swing.JComboBox();
        jButtonRemoveDAP = new javax.swing.JButton();
        jCheckBoxloadFileDAP = new javax.swing.JCheckBox();
        jCheckBoxloadToken = new javax.swing.JCheckBox();
        jCheckBoxinstallToken = new javax.swing.JCheckBox();
        jTextFieldloadToken = new javax.swing.JTextField();
        jTextFieldinstallToken = new javax.swing.JTextField();
        jButtonloadToken = new javax.swing.JButton();
        jButtoninstallToken = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButtoninstallForInstall = new javax.swing.JButton();
        jButtoninstallForLoad = new javax.swing.JButton();
        jButtonload = new javax.swing.JButton();
        jButtoninstallForMakeSelectable = new javax.swing.JButton();
        jButtonall = new javax.swing.JButton();
        jButtoninstallAndMakeSelectable = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Install Application"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Install Parameters"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonCAPFile.setText("Select File ...");
        jButtonCAPFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCAPFileActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jButtonCAPFile, gridBagConstraints);

        jLabelappletInstallParameters.setLabelFor(jTextFieldappletInstallParameters);
        jLabelappletInstallParameters.setText("Applet Install Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelappletInstallParameters, gridBagConstraints);

        jTextFieldappletClassAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldappletClassAID, gridBagConstraints);

        jTextFieldpackageAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldpackageAID, gridBagConstraints);

        jLabelappletClassAID.setLabelFor(jTextFieldappletClassAID);
        jLabelappletClassAID.setText("Applet Class AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelappletClassAID, gridBagConstraints);

        jLabelsecurityDomainAID.setText("Security Domain AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelsecurityDomainAID, gridBagConstraints);

        jLabelCAPFile.setLabelFor(jTextFieldCAPFile);
        jLabelCAPFile.setText("CAP or IJC File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelCAPFile, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Applet Privileges"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setText("Security Domain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setText("DAP Verification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setText("Delegated Management");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setText("Card Manager Lock Privilege");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setText("Card Manager Terminate Privilege");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setText("Default Selected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setText("PIN Change Privilege");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setText("Mandated DAP Verification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPanel1, gridBagConstraints);

        jLabelpackageAID.setLabelFor(jTextFieldpackageAID);
        jLabelpackageAID.setText("Package AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelpackageAID, gridBagConstraints);

        jLabelappletInstanceAID.setLabelFor(jTextFieldappletInstanceAID);
        jLabelappletInstanceAID.setText("Applet Instance AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelappletInstanceAID, gridBagConstraints);

        jTextFieldappletInstallParameters.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldappletInstallParameters, gridBagConstraints);

        jTextFieldappletInstanceAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldappletInstanceAID, gridBagConstraints);

        jTextFieldCAPFile.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldCAPFile, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jComboBoxsecurityDomainAID, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Space Limits"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelnonVolatileCodeSpaceLimit.setLabelFor(jLabelnonVolatileCodeSpaceLimit);
        jLabelnonVolatileCodeSpaceLimit.setText("nonVolatileCodeSpaceLimit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabelnonVolatileCodeSpaceLimit, gridBagConstraints);

        jLabelnonVolatileDataSpaceLimit.setLabelFor(jLabelnonVolatileDataSpaceLimit);
        jLabelnonVolatileDataSpaceLimit.setText("nonVolatileDataSpaceLimit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabelnonVolatileDataSpaceLimit, gridBagConstraints);

        jLabelvolatileDataSpaceLimit.setLabelFor(jLabelvolatileDataSpaceLimit);
        jLabelvolatileDataSpaceLimit.setText("volatileDataSpaceLimit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabelvolatileDataSpaceLimit, gridBagConstraints);

        jTextFieldnonVolatileCodeSpaceLimitForLoad.setColumns(6);
        jTextFieldnonVolatileCodeSpaceLimitForLoad.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldnonVolatileCodeSpaceLimitForLoad, gridBagConstraints);

        jTextFieldnonVolatileDataSpaceLimitForLoad.setColumns(6);
        jTextFieldnonVolatileDataSpaceLimitForLoad.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldnonVolatileDataSpaceLimitForLoad, gridBagConstraints);

        jTextFieldvolatileDataSpaceLimitForLoad.setColumns(6);
        jTextFieldvolatileDataSpaceLimitForLoad.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldvolatileDataSpaceLimitForLoad, gridBagConstraints);

        jTextFieldnonVolatileCodeSpaceLimitForInstall.setColumns(6);
        jTextFieldnonVolatileCodeSpaceLimitForInstall.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldnonVolatileCodeSpaceLimitForInstall, gridBagConstraints);

        jTextFieldnonVolatileDataSpaceLimitForInstall.setColumns(6);
        jTextFieldnonVolatileDataSpaceLimitForInstall.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldnonVolatileDataSpaceLimitForInstall, gridBagConstraints);

        jTextFieldvolatileDataSpaceLimitForInstall.setColumns(6);
        jTextFieldvolatileDataSpaceLimitForInstall.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldvolatileDataSpaceLimitForInstall, gridBagConstraints);

        jLabel1.setText("for load");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabel1, gridBagConstraints);

        jLabel2.setText("for install / install and make selectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Delegated Management Parameters"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonAddDAP.setText("Add Load File Data Block DAP");
        jButtonAddDAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDAPActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jButtonAddDAP, gridBagConstraints);

        jComboBoxDAP.setMaximumSize(new java.awt.Dimension(200, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel4.add(jComboBoxDAP, gridBagConstraints);

        jButtonRemoveDAP.setText("Remove Load File Data Block DAP");
        jButtonRemoveDAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveDAPActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jButtonRemoveDAP, gridBagConstraints);

        jCheckBoxloadFileDAP.setText("Include Load File DAP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jCheckBoxloadFileDAP, gridBagConstraints);

        jCheckBoxloadToken.setText("Include Load Token");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jCheckBoxloadToken, gridBagConstraints);

        jCheckBoxinstallToken.setText("Include Install Token");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jCheckBoxinstallToken, gridBagConstraints);

        jTextFieldloadToken.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jTextFieldloadToken, gridBagConstraints);

        jTextFieldinstallToken.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jTextFieldinstallToken, gridBagConstraints);

        jButtonloadToken.setText("Select File");
        jButtonloadToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonloadTokenActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jButtonloadToken, gridBagConstraints);

        jButtoninstallToken.setText("Select File");
        jButtoninstallToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoninstallTokenActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jButtoninstallToken, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButtoninstallForInstall.setText("INSTALL [for install]");
        jButtoninstallForInstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoninstallForInstallActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtoninstallForInstall, gridBagConstraints);

        jButtoninstallForLoad.setText("INSTALL [for load]");
        jButtoninstallForLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoninstallForLoadActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtoninstallForLoad, gridBagConstraints);

        jButtonload.setText("LOAD");
        jButtonload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonloadActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtonload, gridBagConstraints);

        jButtoninstallForMakeSelectable.setText("INSTALL [for make selectable]");
        jButtoninstallForMakeSelectable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoninstallForMakeSelectableActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtoninstallForMakeSelectable, gridBagConstraints);

        jButtonall.setText("All Together");
        jButtonall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonallActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtonall, gridBagConstraints);

        jButtoninstallAndMakeSelectable.setText("INSTALL [for install and make selectable]");
        jButtoninstallAndMakeSelectable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoninstallAndMakeSelectableActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtoninstallAndMakeSelectable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel5, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel2);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void jButtoninstallAndMakeSelectableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoninstallAndMakeSelectableActionPerformed
        try {
            installForInstallAndMakeSelectable();
        } catch (NumberFormatException e) {
            return;
        } catch (IOException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        javax.swing.JOptionPane.showMessageDialog(this, "INSTALL [for install and make selectable] finished.", "Open Platform Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        parent.refreshStatus();
    }//GEN-LAST:event_jButtoninstallAndMakeSelectableActionPerformed
    
    private void installForInstallAndMakeSelectable() throws NumberFormatException, IOException, OPSPException, Exception {
        swingUtil.resetJComponentColor();
        byte[] appletClassAID;
        try {
            appletClassAID = OPSPUtil.bytesFromHexString(jTextFieldappletClassAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletClassAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] appletInstanceAID;
        try {
            appletInstanceAID = OPSPUtil.bytesFromHexString(jTextFieldappletInstanceAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstanceAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] appletInstallParameters;
        try {
            appletInstallParameters = OPSPUtil.bytesFromHexString(jTextFieldappletInstallParameters.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstallParameters,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            throw e;
        }
        byte[] installToken = null;
        try {
            if (jCheckBoxinstallToken.isSelected()) {
                installToken = OPSPUtil.loadToken(jTextFieldinstallToken.getText());
            }
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldinstallToken,
                    e.getMessage(), "I/O Error");
            throw e;
        }
        long volatileDataSpaceLimit;
        try {
            volatileDataSpaceLimit = Long.decode(jTextFieldvolatileDataSpaceLimitForInstall.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldvolatileDataSpaceLimitForInstall,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        long nonVolatileDataSpaceLimit;
        try {
            nonVolatileDataSpaceLimit = Long.decode(jTextFieldnonVolatileDataSpaceLimitForInstall.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileDataSpaceLimitForInstall,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        byte appletPrivileges = 0;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
        
        Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                OPSPCardConnectionInfo.class, byte[].class, byte[].class, byte[].class, Byte.TYPE,
                Long.TYPE, Long.TYPE, byte[].class, byte[].class};
                Object parameters[] = new Object[] {parent.session.cardHandle, parent.session.secInfo,
                        parent.session.cardInfo, packageAID, appletClassAID,
                        appletInstanceAID, appletPrivileges, volatileDataSpaceLimit,
                        nonVolatileDataSpaceLimit, appletInstallParameters, installToken};
                        
                        OPSPReceiptData receiptData = (OPSPReceiptData)WaitForMethodJDialog.showDialog(parent,
                                "org.dyndns.widerstand.OpenPlatform.OPSPWrapper",
                                "installForInstallAndMakeSelectable", null, parameterTypes, parameters);
                        
                        if (receiptData != null) {
                            final JFileChooser fc = new JFileChooser();
                            int ret = fc.showSaveDialog(this);
                            if (ret == JFileChooser.APPROVE_OPTION) {
                                try {
                                    File file = fc.getSelectedFile();
                                    OPSPUtil.saveOPSPReceiptData(file, receiptData);
                                } catch (IOException e) {
                                    javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                                            "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
    }
    
    private void jButtonRemoveDAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveDAPActionPerformed
        if (jComboBoxDAP.getSelectedIndex() > -1) {
            jComboBoxDAP.removeItemAt(jComboBoxDAP.getSelectedIndex());
        }
    }//GEN-LAST:event_jButtonRemoveDAPActionPerformed
    
    private void jButtonAddDAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDAPActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            final File file = fc.getSelectedFile();
            jComboBoxDAP.addItem(new FileItem(file.getName(), file.getAbsolutePath()));
        }
    }//GEN-LAST:event_jButtonAddDAPActionPerformed
    
    private void jButtonallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonallActionPerformed
        try {
            installForLoad();
        } catch (NumberFormatException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException e) {
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            load();
        } catch (NumberFormatException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException e) {
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            installForInstallAndMakeSelectable();
        } catch (NumberFormatException e) {
            String AIDNames[] = new String[1];
            AIDNames[0] = jTextFieldpackageAID.getText();
            deleteFailedApplet(AIDNames);
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            String AIDNames[] = new String[1];
            AIDNames[0] = jTextFieldpackageAID.getText();
            deleteFailedApplet(AIDNames);
            return;
        } catch (IOException e) {
            String AIDNames[] = new String[1];
            AIDNames[0] = jTextFieldpackageAID.getText();
            deleteFailedApplet(AIDNames);
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            String AIDNames[] = new String[1];
            AIDNames[0] = jTextFieldpackageAID.getText();
            deleteFailedApplet(AIDNames);
            return;
        }
        javax.swing.JOptionPane.showMessageDialog(this, "Applet Installed.", "Open Platform Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        parent.refreshStatus();
    }//GEN-LAST:event_jButtonallActionPerformed
    
    private void deleteFailedApplet(String[] AIDNames) {
        byte[][] AIDs;
        AIDs = new byte[AIDNames.length][];
        for (int i=0; i<AIDNames.length; i++) {
            AIDs[i] = OPSPUtil.bytesFromHexString(AIDNames[i]);
        }
        try {
            Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                    OPSPCardConnectionInfo.class, byte[][].class};
                    Object parameters[] = new Object[] {parent.session.cardHandle,
                            parent.session.secInfo, parent.session.cardInfo,
                            AIDs};
                            
                            WaitForMethodJDialog.showDialog(parent,
                                    "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "deleteApplet", null, parameterTypes, parameters);
        } catch (Exception e) {
            for (int i=0; i<AIDNames.length; i++) {
                AIDs = new byte[1][];
                AIDs[0] = OPSPUtil.bytesFromHexString(AIDNames[i]);
                try {
                    Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                            OPSPCardConnectionInfo.class, byte[][].class};
                            Object parameters[] = new Object[] {parent.session.cardHandle,
                                    parent.session.secInfo, parent.session.cardInfo,
                                    AIDs};
                                    
                                    WaitForMethodJDialog.showDialog(parent,
                                            "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "deleteApplet", null, parameterTypes, parameters);
                } catch (Exception ex) {
                    return;
                }
            }
        }
        
    }
    
    private void installForMakeSelectable() throws NumberFormatException, IOException, OPSPException, Exception {
        swingUtil.resetJComponentColor();
        byte[] appletInstanceAID;
        try {
            appletInstanceAID = OPSPUtil.bytesFromHexString(jTextFieldappletInstanceAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstanceAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] installToken = null;
        try {
            if (jCheckBoxinstallToken.isSelected()) {
                installToken = OPSPUtil.loadToken(jTextFieldinstallToken.getText());
            }
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldinstallToken,
                    e.getMessage(), "I/O Error");
            throw e;
        }
        byte appletPrivileges = 0;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
        Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                OPSPCardConnectionInfo.class, byte[].class, Byte.TYPE, byte[].class};
                Object parameters[] = new Object[] {parent.session.cardHandle,
                        parent.session.secInfo,
                        parent.session.cardInfo, appletInstanceAID,
                        appletPrivileges, installToken};
                        
                        OPSPReceiptData receiptData = (OPSPReceiptData)WaitForMethodJDialog.showDialog(parent,
                                "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "installForMakeSelectable", null, parameterTypes, parameters);
                        if (receiptData != null) {
                            final JFileChooser fc = new JFileChooser();
                            int ret = fc.showSaveDialog(this);
                            if (ret == JFileChooser.APPROVE_OPTION) {
                                try {
                                    File file = fc.getSelectedFile();
                                    OPSPUtil.saveOPSPReceiptData(file, receiptData);
                                } catch (IOException e) {
                                    javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                                            "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
    }
    
    private void jButtoninstallForMakeSelectableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoninstallForMakeSelectableActionPerformed
        try {
            installForMakeSelectable();
        } catch (NumberFormatException e) {
            return;
        } catch (IOException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        javax.swing.JOptionPane.showMessageDialog(this, "INSTALL [for make selectable] finished.", "Open Platform Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        parent.refreshStatus();
    }//GEN-LAST:event_jButtoninstallForMakeSelectableActionPerformed
    
    public void refresh() {
        jComboBoxsecurityDomainAID.removeAllItems();
        for (OPSPApplicationData appData : parent.session.cardManager) {
            jComboBoxsecurityDomainAID.addItem(OPSPUtil.toHexString(appData.getAID()));
        }
        for (OPSPApplicationData appData : parent.session.securityDomains) {
            jComboBoxsecurityDomainAID.addItem(OPSPUtil.toHexString(appData.getAID()));
        }
    }
    
    private void installForInstall() throws NumberFormatException, IOException, OPSPException, Exception {
        swingUtil.resetJComponentColor();
        byte[] appletClassAID;
        try {
            appletClassAID = OPSPUtil.bytesFromHexString(jTextFieldappletClassAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletClassAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] appletInstanceAID;
        try {
            appletInstanceAID = OPSPUtil.bytesFromHexString(jTextFieldappletInstanceAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstanceAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] appletInstallParameters;
        try {
            appletInstallParameters = OPSPUtil.bytesFromHexString(jTextFieldappletInstallParameters.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstallParameters,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            throw e;
        }
        byte[] installToken = null;
        try {
            if (jCheckBoxinstallToken.isSelected()) {
                installToken = OPSPUtil.loadToken(jTextFieldinstallToken.getText());
            }
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldinstallToken,
                    e.getMessage(), "I/O Error");
            throw e;
        }
        long volatileDataSpaceLimit;
        try {
            volatileDataSpaceLimit = Long.decode(jTextFieldvolatileDataSpaceLimitForInstall.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldvolatileDataSpaceLimitForInstall,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        long nonVolatileDataSpaceLimit;
        try {
            nonVolatileDataSpaceLimit = Long.decode(jTextFieldnonVolatileDataSpaceLimitForInstall.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileDataSpaceLimitForInstall,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        byte appletPrivileges = 0;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
        
        Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                OPSPCardConnectionInfo.class, byte[].class, byte[].class, byte[].class, Byte.TYPE,
                Long.TYPE, Long.TYPE, byte[].class, byte[].class};
                Object parameters[] = new Object[] {parent.session.cardHandle, parent.session.secInfo,
                        parent.session.cardInfo, packageAID, appletClassAID,
                        appletInstanceAID, appletPrivileges, volatileDataSpaceLimit,
                        nonVolatileDataSpaceLimit, appletInstallParameters, installToken};
                        
                        OPSPReceiptData receiptData = (OPSPReceiptData)WaitForMethodJDialog.showDialog(parent,
                                "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "installForInstall", null, parameterTypes, parameters);
                        
                        if (receiptData != null) {
                            final JFileChooser fc = new JFileChooser();
                            int ret = fc.showSaveDialog(this);
                            if (ret == JFileChooser.APPROVE_OPTION) {
                                try {
                                    File file = fc.getSelectedFile();
                                    OPSPUtil.saveOPSPReceiptData(file, receiptData);
                                } catch (IOException e) {
                                    javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                                            "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
    }
    
    private void jButtoninstallForInstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoninstallForInstallActionPerformed
        try {
            installForInstall();
        } catch (NumberFormatException e) {
            return;
        } catch (IOException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        javax.swing.JOptionPane.showMessageDialog(this, "INSTALL [for install] finished.", "Open Platform Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        parent.refreshStatus();
    }//GEN-LAST:event_jButtoninstallForInstallActionPerformed
    
    private void load() throws NumberFormatException, OPSPException, IOException, Exception {
        swingUtil.resetJComponentColor();
        String CAPFileName = jTextFieldCAPFile.getText();
        OPSPDAPBlock dapBlocks[] = new OPSPDAPBlock[jComboBoxDAP.getItemCount()];
        try {
            for (int i=0; i<jComboBoxDAP.getItemCount(); i++) {
                String fileName = ((FileItem)jComboBoxDAP.getItemAt(i)).fullName();
                dapBlocks[i] = OPSPUtil.loadDAP(fileName);
            }
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldinstallToken,
                    e.getMessage(), "I/O Error");
            throw e;
        }
        Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                OPSPCardConnectionInfo.class, OPSPDAPBlock[].class, String.class};
                Object parameters[] = new Object[] {parent.session.cardHandle, parent.session.secInfo,
                        parent.session.cardInfo, dapBlocks, CAPFileName};
                        
                        OPSPReceiptData receiptData = (OPSPReceiptData)WaitForMethodJDialog.showDialog(parent,
                                "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "loadApplet", null, parameterTypes, parameters);
                        if (receiptData != null) {
                            final JFileChooser fc = new JFileChooser();
                            int ret = fc.showSaveDialog(this);
                            if (ret == JFileChooser.APPROVE_OPTION) {
                                try {
                                    File file = fc.getSelectedFile();
                                    OPSPUtil.saveOPSPReceiptData(file, receiptData);
                                } catch (IOException e) {
                                    javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                                            "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
    }
    
    private void jButtonloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonloadActionPerformed
        try {
            load();
        } catch (NumberFormatException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException e) {
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        javax.swing.JOptionPane.showMessageDialog(this, "LOAD finished.", "Open Platform Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        parent.refreshStatus();
    }//GEN-LAST:event_jButtonloadActionPerformed
    
    private void installForLoad() throws NumberFormatException, OPSPException, IOException, Exception {
        String CAPFileName = jTextFieldCAPFile.getText();
        swingUtil.resetJComponentColor();
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            throw e;
        }
        byte[] securityDomainAID = OPSPUtil.bytesFromHexString((String)jComboBoxsecurityDomainAID.getSelectedItem());
        byte[] loadFileDAP = null;
        if (jCheckBoxloadFileDAP.isSelected()) {
            OPSPDAPBlock dapBlocks[] = new OPSPDAPBlock[jComboBoxDAP.getItemCount()];
            for (int i=0; i<jComboBoxDAP.getItemCount(); i++) {
                String fileName = ((FileItem)jComboBoxDAP.getItemAt(i)).fullName();
                dapBlocks[i] = OPSPUtil.loadDAP(fileName);
            }
            loadFileDAP = OPSPWrapper.calculateLoadFileDAP(dapBlocks, CAPFileName);
        }
        byte[] loadToken = null;
        try {
            if (jCheckBoxloadToken.isSelected()) {
                loadToken = OPSPUtil.loadToken(jTextFieldloadToken.getText());
            }
        } catch (IOException e) {
            swingUtil.errorInJComponent(this, jTextFieldloadToken,
                    e.getMessage(), "I/O Error");
            throw e;
        }
        long nonVolatileCodeSpaceLimit;
        try {
            nonVolatileCodeSpaceLimit = Long.decode(jTextFieldnonVolatileCodeSpaceLimitForLoad.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileCodeSpaceLimitForLoad,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        long volatileDataSpaceLimit=0;
        try {
            volatileDataSpaceLimit = Long.decode(jTextFieldvolatileDataSpaceLimitForLoad.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldvolatileDataSpaceLimitForLoad,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        long nonVolatileDataSpaceLimit=0;
        try {
            nonVolatileDataSpaceLimit = Long.decode(jTextFieldnonVolatileDataSpaceLimitForLoad.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileDataSpaceLimitForLoad,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            throw e;
        }
        Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                OPSPCardConnectionInfo.class, byte[].class, byte[].class, byte[].class, byte[].class,
                Long.TYPE, Long.TYPE, Long.TYPE};
                Object parameters[] = new Object[] {parent.session.cardHandle, parent.session.secInfo,
                        parent.session.cardInfo, packageAID,
                        securityDomainAID, loadFileDAP,
                        loadToken, nonVolatileCodeSpaceLimit,
                        volatileDataSpaceLimit, nonVolatileDataSpaceLimit};
                        WaitForMethodJDialog.showDialog(parent,
                                "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "installForLoad",
                                null, parameterTypes, parameters);
    }
    
    private void jButtoninstallForLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoninstallForLoadActionPerformed
        try {
            installForLoad();
        } catch (NumberFormatException e) {
            return;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException e) {
            return;
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        javax.swing.JOptionPane.showMessageDialog(this, "INSTALL [for load] finished.", "Open Platform Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtoninstallForLoadActionPerformed
    
    private void jButtoninstallTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoninstallTokenActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTextFieldinstallToken.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtoninstallTokenActionPerformed
    
    private void jButtonloadTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonloadTokenActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTextFieldloadToken.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonloadTokenActionPerformed
    
    private void jButtonCAPFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCAPFileActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTextFieldCAPFile.setText(file.getAbsolutePath());
            jTextFieldnonVolatileCodeSpaceLimitForLoad.setText(String.valueOf(file.length()));
        }
    }//GEN-LAST:event_jButtonCAPFileActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddDAP;
    private javax.swing.JButton jButtonCAPFile;
    private javax.swing.JButton jButtonRemoveDAP;
    private javax.swing.JButton jButtonall;
    private javax.swing.JButton jButtoninstallAndMakeSelectable;
    private javax.swing.JButton jButtoninstallForInstall;
    private javax.swing.JButton jButtoninstallForLoad;
    private javax.swing.JButton jButtoninstallForMakeSelectable;
    private javax.swing.JButton jButtoninstallToken;
    private javax.swing.JButton jButtonload;
    private javax.swing.JButton jButtonloadToken;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
    private javax.swing.JCheckBox jCheckBoxinstallToken;
    private javax.swing.JCheckBox jCheckBoxloadFileDAP;
    private javax.swing.JCheckBox jCheckBoxloadToken;
    private javax.swing.JComboBox jComboBoxDAP;
    private javax.swing.JComboBox jComboBoxsecurityDomainAID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCAPFile;
    private javax.swing.JLabel jLabelappletClassAID;
    private javax.swing.JLabel jLabelappletInstallParameters;
    private javax.swing.JLabel jLabelappletInstanceAID;
    private javax.swing.JLabel jLabelnonVolatileCodeSpaceLimit;
    private javax.swing.JLabel jLabelnonVolatileDataSpaceLimit;
    private javax.swing.JLabel jLabelpackageAID;
    private javax.swing.JLabel jLabelsecurityDomainAID;
    private javax.swing.JLabel jLabelvolatileDataSpaceLimit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCAPFile;
    private javax.swing.JTextField jTextFieldappletClassAID;
    private javax.swing.JTextField jTextFieldappletInstallParameters;
    private javax.swing.JTextField jTextFieldappletInstanceAID;
    private javax.swing.JTextField jTextFieldinstallToken;
    private javax.swing.JTextField jTextFieldloadToken;
    private javax.swing.JTextField jTextFieldnonVolatileCodeSpaceLimitForInstall;
    private javax.swing.JTextField jTextFieldnonVolatileCodeSpaceLimitForLoad;
    private javax.swing.JTextField jTextFieldnonVolatileDataSpaceLimitForInstall;
    private javax.swing.JTextField jTextFieldnonVolatileDataSpaceLimitForLoad;
    private javax.swing.JTextField jTextFieldpackageAID;
    private javax.swing.JTextField jTextFieldvolatileDataSpaceLimitForInstall;
    private javax.swing.JTextField jTextFieldvolatileDataSpaceLimitForLoad;
    // End of variables declaration//GEN-END:variables
    
}
