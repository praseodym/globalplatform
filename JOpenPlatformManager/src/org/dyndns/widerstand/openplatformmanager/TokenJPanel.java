/*
 * TokenJPanel.java
 *
 * Created on 28. Februar 2005, 11:00
 */

package org.dyndns.widerstand.openplatformmanager;

import javax.swing.*;
import org.dyndns.widerstand.OpenPlatform.*;
import java.io.*;

/**
 *
 * @author  Widerstand
 */
public class TokenJPanel extends javax.swing.JPanel {
    
    private MainJFrame parent;
    private String password = new String();
    private SwingUtil swingUtil;
    
    /** Creates new form TokenJPanel */
    public TokenJPanel(MainJFrame parent) {
        this.parent = parent;
        swingUtil = new SwingUtil();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonCAPFile = new javax.swing.JButton();
        jTextFieldvolatileDataSpaceLimit = new javax.swing.JTextField();
        jLabelappletInstallParameters = new javax.swing.JLabel();
        jTextFieldnonVolatileDataSpaceLimit = new javax.swing.JTextField();
        jTextFieldnonVolatileCodeSpaceLimit = new javax.swing.JTextField();
        jTextFieldappletClassAID = new javax.swing.JTextField();
        jTextFieldpackageAID = new javax.swing.JTextField();
        jLabelappletClassAID = new javax.swing.JLabel();
        jLabelsecurityDomainAID = new javax.swing.JLabel();
        jLabelCAPFile = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION = new javax.swing.JCheckBox();
        jLabelvolatileDataSpaceLimit = new javax.swing.JLabel();
        jLabelnonVolatileDataSpaceLimit = new javax.swing.JLabel();
        jLabelpackageAID = new javax.swing.JLabel();
        jLabelappletInstanceAID = new javax.swing.JLabel();
        jLabelnonVolatileCodeSpaceLimit = new javax.swing.JLabel();
        jTextFieldappletInstallParameters = new javax.swing.JTextField();
        jTextFieldappletInstanceAID = new javax.swing.JTextField();
        jTextFieldCAPFile = new javax.swing.JTextField();
        jTextFieldsecurityDomainAID = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButtonCalculateInstallToken = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jRadioButtonForInstall = new javax.swing.JRadioButton();
        jRadioButtonForMakeSelectable = new javax.swing.JRadioButton();
        jRadioButtonForInstallAndMakeSelectable = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jButtonCalculateLoadToken = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButtonAddDAP = new javax.swing.JButton();
        jComboBoxDAP = new javax.swing.JComboBox();
        jButtonRemoveDAP = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabelRSAKey = new javax.swing.JLabel();
        jTextFieldRSAKey = new javax.swing.JTextField();
        jButtonLoadRSAKey = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Calculate Token"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Install Parameters"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonCAPFile.setText("Select File ...");
        jButtonCAPFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCAPFileActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jButtonCAPFile, gridBagConstraints);

        jTextFieldvolatileDataSpaceLimit.setColumns(6);
        jTextFieldvolatileDataSpaceLimit.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldvolatileDataSpaceLimit, gridBagConstraints);

        jLabelappletInstallParameters.setText("Applet Install Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelappletInstallParameters, gridBagConstraints);

        jTextFieldnonVolatileDataSpaceLimit.setColumns(6);
        jTextFieldnonVolatileDataSpaceLimit.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldnonVolatileDataSpaceLimit, gridBagConstraints);

        jTextFieldnonVolatileCodeSpaceLimit.setColumns(6);
        jTextFieldnonVolatileCodeSpaceLimit.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldnonVolatileCodeSpaceLimit, gridBagConstraints);

        jTextFieldappletClassAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldappletClassAID, gridBagConstraints);

        jTextFieldpackageAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldpackageAID, gridBagConstraints);

        jLabelappletClassAID.setText("Applet Class AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelappletClassAID, gridBagConstraints);

        jLabelsecurityDomainAID.setText("Security Domain AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelsecurityDomainAID, gridBagConstraints);

        jLabelCAPFile.setText("CAP or IJC File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelCAPFile, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Applet Privileges"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setText("Security Domain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setText("DAP Verification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setText("Delegated Management");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setText("Card Manager Lock Privilege");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setText("Card Manager Terminate Privilege");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setText("Default Selected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setText("PIN Change Privilege");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setText("Mandated DAP Verification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPanel1, gridBagConstraints);

        jLabelvolatileDataSpaceLimit.setText("volatileDataSpaceLimit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelvolatileDataSpaceLimit, gridBagConstraints);

        jLabelnonVolatileDataSpaceLimit.setText("nonVolatileDataSpaceLimit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelnonVolatileDataSpaceLimit, gridBagConstraints);

        jLabelpackageAID.setText("Package AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelpackageAID, gridBagConstraints);

        jLabelappletInstanceAID.setText("Applet Instance AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelappletInstanceAID, gridBagConstraints);

        jLabelnonVolatileCodeSpaceLimit.setText("nonVolatileCodeSpaceLimit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelnonVolatileCodeSpaceLimit, gridBagConstraints);

        jTextFieldappletInstallParameters.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldappletInstallParameters, gridBagConstraints);

        jTextFieldappletInstanceAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldappletInstanceAID, gridBagConstraints);

        jTextFieldCAPFile.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldCAPFile, gridBagConstraints);

        jTextFieldsecurityDomainAID.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jTextFieldsecurityDomainAID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Calculate Install Token"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonCalculateInstallToken.setText("Calculate Install Token");
        jButtonCalculateInstallToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculateInstallTokenActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel7.add(jButtonCalculateInstallToken, gridBagConstraints);

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.Y_AXIS));

        buttonGroup1.add(jRadioButtonForInstall);
        jRadioButtonForInstall.setText("[for install]");
        jPanel8.add(jRadioButtonForInstall);

        buttonGroup1.add(jRadioButtonForMakeSelectable);
        jRadioButtonForMakeSelectable.setText("[for make selectable]");
        jPanel8.add(jRadioButtonForMakeSelectable);

        buttonGroup1.add(jRadioButtonForInstallAndMakeSelectable);
        jRadioButtonForInstallAndMakeSelectable.setSelected(true);
        jRadioButtonForInstallAndMakeSelectable.setText("[for install and make selectable]");
        jPanel8.add(jRadioButtonForInstallAndMakeSelectable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel7.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jPanel7, gridBagConstraints);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Calculate Load Token"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonCalculateLoadToken.setText("Calculate Load Token");
        jButtonCalculateLoadToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculateLoadTokenActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel9.add(jButtonCalculateLoadToken, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jPanel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel2.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Load File Data Block DAPs"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jButtonAddDAP.setText("Add Load File Data Block DAP");
        jButtonAddDAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDAPActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtonAddDAP, gridBagConstraints);

        jComboBoxDAP.setMaximumSize(new java.awt.Dimension(200, 22));
        jComboBoxDAP.setMinimumSize(new java.awt.Dimension(200, 22));
        jComboBoxDAP.setPreferredSize(new java.awt.Dimension(200, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel5.add(jComboBoxDAP, gridBagConstraints);

        jButtonRemoveDAP.setText("Remove Load File Data Block DAP");
        jButtonRemoveDAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveDAPActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jButtonRemoveDAP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Token Generation Key"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelRSAKey.setText("Private RSA Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel6.add(jLabelRSAKey, gridBagConstraints);

        jTextFieldRSAKey.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel6.add(jTextFieldRSAKey, gridBagConstraints);

        jButtonLoadRSAKey.setText("Load Key File");
        jButtonLoadRSAKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadRSAKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel6.add(jButtonLoadRSAKey, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel6, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel2);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    private void jButtonCalculateInstallTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculateInstallTokenActionPerformed
        swingUtil.resetJComponentColor();
        byte[] appletClassAID;
        try {
            appletClassAID = OPSPUtil.bytesFromHexString(jTextFieldappletClassAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletClassAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] appletInstanceAID;
        try {
            appletInstanceAID = OPSPUtil.bytesFromHexString(jTextFieldappletInstanceAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstanceAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] appletInstallParameters;
        try {
            appletInstallParameters = OPSPUtil.bytesFromHexString(jTextFieldappletInstallParameters.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldappletInstallParameters,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        long volatileDataSpaceLimit;
        try {
            volatileDataSpaceLimit = Long.decode(jTextFieldvolatileDataSpaceLimit.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldvolatileDataSpaceLimit,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        long nonVolatileDataSpaceLimit;
        try {
            nonVolatileDataSpaceLimit = Long.decode(jTextFieldnonVolatileDataSpaceLimit.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileDataSpaceLimit,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        byte appletPrivileges = 0;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
        if (jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.isSelected())
            appletPrivileges |= OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
        
        byte[] installToken = null;
        byte P1 = 0;
        if (jRadioButtonForInstall.isSelected()) {
            P1 = 0x04;
        };
        if (jRadioButtonForInstallAndMakeSelectable.isSelected()) {
            P1 = 0x0C;
        };
        if (jRadioButtonForMakeSelectable.isSelected()) {
            P1 = 0x08;
        };
        try {
            installToken = OPSPWrapper.calculateInstallToken(P1, packageAID, appletClassAID,
                    appletInstanceAID, appletPrivileges, volatileDataSpaceLimit,
                    nonVolatileDataSpaceLimit, appletInstallParameters, jTextFieldRSAKey.getText(), password);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showSaveDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                OPSPUtil.saveToken(file, installToken);
            } catch (IOException e) {
                javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                        "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_jButtonCalculateInstallTokenActionPerformed
    
    private void jButtonLoadRSAKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadRSAKeyActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTextFieldRSAKey.setText(file.getAbsolutePath());
            password = PasswordJDialog.showDialog(parent);
        } else {
            password = new String();
        }
    }//GEN-LAST:event_jButtonLoadRSAKeyActionPerformed
    
    private void jButtonCalculateLoadTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculateLoadTokenActionPerformed
        swingUtil.resetJComponentColor();
        String CAPFileName = jTextFieldCAPFile.getText();
        byte[] packageAID;
        try {
            packageAID = OPSPUtil.bytesFromHexString(jTextFieldpackageAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldpackageAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] securityDomainAID = null;
        try {
            securityDomainAID = OPSPUtil.bytesFromHexString(jTextFieldsecurityDomainAID.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldsecurityDomainAID,
                    "Colored text field cannot be understood as AID", "Wrong Number Format");
            return;
        }
        byte[] loadFileDAP = null;
        try {
            OPSPDAPBlock dapBlocks[] = new OPSPDAPBlock[jComboBoxDAP.getItemCount()];
            for (int i=0; i<jComboBoxDAP.getItemCount(); i++) {
                String fileName = ((FileItem)jComboBoxDAP.getItemAt(i)).fullName();
                dapBlocks[i] = OPSPUtil.loadDAP(fileName);
            }
            loadFileDAP = OPSPWrapper.calculateLoadFileDAP(dapBlocks, CAPFileName);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        byte[] loadToken = null;
        long nonVolatileCodeSpaceLimit;
        try {
            nonVolatileCodeSpaceLimit = Long.decode(jTextFieldnonVolatileCodeSpaceLimit.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileCodeSpaceLimit,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        long volatileDataSpaceLimit;
        try {
            volatileDataSpaceLimit = Long.decode(jTextFieldvolatileDataSpaceLimit.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldvolatileDataSpaceLimit,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        long nonVolatileDataSpaceLimit;
        try {
            nonVolatileDataSpaceLimit = Long.decode(jTextFieldnonVolatileDataSpaceLimit.getText());
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldnonVolatileDataSpaceLimit,
                    "Colored text field cannot be understood as number", "Wrong Number Format");
            return;
        }
        try {
            loadToken = OPSPWrapper.calculateLoadToken(packageAID, securityDomainAID, loadFileDAP,
                    nonVolatileCodeSpaceLimit, volatileDataSpaceLimit, nonVolatileDataSpaceLimit,
                    jTextFieldRSAKey.getText(), password);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showSaveDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                OPSPUtil.saveToken(file, loadToken);
            } catch (IOException e) {
                javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                        "I/O Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_jButtonCalculateLoadTokenActionPerformed
    
    private void jButtonRemoveDAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveDAPActionPerformed
        if (jComboBoxDAP.getSelectedIndex() > -1) {
            jComboBoxDAP.removeItemAt(jComboBoxDAP.getSelectedIndex());
        }
    }//GEN-LAST:event_jButtonRemoveDAPActionPerformed
    
    private void jButtonAddDAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDAPActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            final File file = fc.getSelectedFile();
            jComboBoxDAP.addItem(new FileItem(file.getName(), file.getAbsolutePath()));
        }
    }//GEN-LAST:event_jButtonAddDAPActionPerformed
    
    private void jButtonCAPFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCAPFileActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTextFieldCAPFile.setText(file.getAbsolutePath());
            jTextFieldnonVolatileCodeSpaceLimit.setText(String.valueOf(file.length()));
        }
    }//GEN-LAST:event_jButtonCAPFileActionPerformed
    
    public void refresh() {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAddDAP;
    private javax.swing.JButton jButtonCAPFile;
    private javax.swing.JButton jButtonCalculateInstallToken;
    private javax.swing.JButton jButtonCalculateLoadToken;
    private javax.swing.JButton jButtonLoadRSAKey;
    private javax.swing.JButton jButtonRemoveDAP;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
    private javax.swing.JComboBox jComboBoxDAP;
    private javax.swing.JLabel jLabelCAPFile;
    private javax.swing.JLabel jLabelRSAKey;
    private javax.swing.JLabel jLabelappletClassAID;
    private javax.swing.JLabel jLabelappletInstallParameters;
    private javax.swing.JLabel jLabelappletInstanceAID;
    private javax.swing.JLabel jLabelnonVolatileCodeSpaceLimit;
    private javax.swing.JLabel jLabelnonVolatileDataSpaceLimit;
    private javax.swing.JLabel jLabelpackageAID;
    private javax.swing.JLabel jLabelsecurityDomainAID;
    private javax.swing.JLabel jLabelvolatileDataSpaceLimit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButtonForInstall;
    private javax.swing.JRadioButton jRadioButtonForInstallAndMakeSelectable;
    private javax.swing.JRadioButton jRadioButtonForMakeSelectable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCAPFile;
    private javax.swing.JTextField jTextFieldRSAKey;
    private javax.swing.JTextField jTextFieldappletClassAID;
    private javax.swing.JTextField jTextFieldappletInstallParameters;
    private javax.swing.JTextField jTextFieldappletInstanceAID;
    private javax.swing.JTextField jTextFieldnonVolatileCodeSpaceLimit;
    private javax.swing.JTextField jTextFieldnonVolatileDataSpaceLimit;
    private javax.swing.JTextField jTextFieldpackageAID;
    private javax.swing.JTextField jTextFieldsecurityDomainAID;
    private javax.swing.JTextField jTextFieldvolatileDataSpaceLimit;
    // End of variables declaration//GEN-END:variables
    
}
