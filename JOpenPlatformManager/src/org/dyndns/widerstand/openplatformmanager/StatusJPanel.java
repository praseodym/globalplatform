/*
 * GetSetStatusJPanel.java
 *
 * Created on 21. Februar 2005, 11:28
 */

package org.dyndns.widerstand.openplatformmanager;

import org.dyndns.widerstand.OpenPlatform.*;
import javax.swing.*;

/**
 *
 * @author  Widerstand
 */
public class StatusJPanel extends javax.swing.JPanel {
    
    private MainJFrame parent;
    private SpinnerListModel spinnerModel;
    
    /** Creates new form GetSetStatusJPanel */
    public StatusJPanel(MainJFrame parent) {
        this.parent = parent;
        spinnerModel = new SpinnerListModel();
        initComponents();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jButtonGetStatus = new javax.swing.JButton();
        jButtonSetStatus = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jSpinnerLifeCycleState = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE = new javax.swing.JCheckBox();
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION = new javax.swing.JCheckBox();
        jLabelLifeCycleState = new javax.swing.JLabel();
        jLabelAID = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Status"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanel19.setLayout(new java.awt.GridBagLayout());

        jPanel20.setLayout(new java.awt.GridBagLayout());

        jButtonGetStatus.setText("Get Status");
        jButtonGetStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetStatusActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel20.add(jButtonGetStatus, gridBagConstraints);

        jButtonSetStatus.setText("Set Status");
        jButtonSetStatus.setEnabled(false);
        jButtonSetStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetStatusActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel20.add(jButtonSetStatus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel19.add(jPanel20, gridBagConstraints);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Available AIDs"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabel1.setText("Availabe Applications");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 20);
        jPanel1.add(jLabel1, gridBagConstraints);

        jComboBox1.setMinimumSize(new java.awt.Dimension(300, 20));
        jComboBox1.setPreferredSize(new java.awt.Dimension(300, 22));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jComboBox1, gridBagConstraints);

        jPanel4.add(jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Application Status"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jSpinnerLifeCycleState.setModel(spinnerModel);
        jSpinnerLifeCycleState.setMinimumSize(new java.awt.Dimension(300, 20));
        jSpinnerLifeCycleState.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jSpinnerLifeCycleState, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Applet Privileges"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setText("Security Domain");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setText("DAP Verification");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setText("Delegated Management");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setText("Card Manager Lock Privilege");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setText("Card Manager Terminate Privilege");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setText("Default Selected");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setText("PIN Change Privilege");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE, gridBagConstraints);

        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setText("Mandated DAP Verification");
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel3, gridBagConstraints);

        jLabelLifeCycleState.setText("Life Cycle State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabelLifeCycleState, gridBagConstraints);

        jLabelAID.setText("AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabelAID, gridBagConstraints);

        jTextField1.setColumns(32);
        jTextField1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jTextField1, gridBagConstraints);

        jPanel4.add(jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel19.add(jPanel4, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel19);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void jButtonSetStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetStatusActionPerformed
        byte[] AID = OPSPUtil.bytesFromHexString(jTextField1.getText());
        byte lifeCycleState = 0;
        byte cardElement;
        if (findCardManager(jTextField1.getText()) != null) {
            cardElement = OPSPApplet.OPSP_STATUS_CARD_MANAGER;
        } else if (findLoadFiles(jTextField1.getText()) != null) {
            cardElement = OPSPApplet.OPSP_STATUS_LOAD_FILES;
        } else {
            cardElement = OPSPApplet.OPSP_STATUS_APPLICATIONS;
        }
        if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_LOAD_FILE_LOGICALLY_DELETED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_LOAD_FILE_LOGICALLY_DELETED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_LOAD_FILE_LOADED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_LOAD_FILE_LOADED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_CARD_MANAGER_OP_READY"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_OP_READY;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_CARD_MANAGER_INITIALIZED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_INITIALIZED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_LOAD_FILE_LOGICALLY_DELETED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_LOAD_FILE_LOGICALLY_DELETED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_CARD_MANAGER_SECURED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_SECURED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_CARD_MANAGER_CM_LOCKED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_CM_LOCKED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_CARD_MANAGER_TERMINATED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_TERMINATED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_APPLICATION_LOGICALLY_DELETED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_LOGICALLY_DELETED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_APPLICATION_SELECTABLE"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_SELECTABLE;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_APPLICATION_BLOCKED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_BLOCKED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_APPLICATION_PERSONALIZED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_PERSONALIZED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_APPLICATION_INSTALLED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_INSTALLED;
        else if (jSpinnerLifeCycleState.getValue().equals("LIFE_CYCLE_APPLICATION_LOCKED"))
            lifeCycleState = OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_LOCKED;
        try {
            OPSPWrapper.setStatus(parent.session.cardHandle, parent.session.secInfo,
                    parent.session.cardInfo, cardElement, AID, lifeCycleState);
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        parent.refreshStatus();
    }//GEN-LAST:event_jButtonSetStatusActionPerformed
    
    private void resetPrivilegesField() {
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setSelected(false);
        jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setSelected(false);
    }
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        OPSPApplicationData appData;
        jTextField1.setText((String)jComboBox1.getSelectedItem());
        resetPrivilegesField();
        appData = findCardManager((String)jComboBox1.getSelectedItem());
        if (appData != null) {
            
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setSelected(true);
            
            String[] lifeCycleStates = {"LIFE_CYCLE_CARD_MANAGER_OP_READY", "LIFE_CYCLE_CARD_MANAGER_INITIALIZED",
                    "LIFE_CYCLE_CARD_MANAGER_SECURED", "LIFE_CYCLE_CARD_MANAGER_CM_LOCKED", "LIFE_CYCLE_CARD_MANAGER_TERMINATED"};
                    spinnerModel.setList(java.util.Arrays.asList(lifeCycleStates));
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_CM_LOCKED)
                        spinnerModel.setValue(lifeCycleStates[3]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_INITIALIZED)
                        spinnerModel.setValue(lifeCycleStates[1]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_OP_READY)
                        spinnerModel.setValue(lifeCycleStates[0]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_SECURED)
                        spinnerModel.setValue(lifeCycleStates[2]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_CARD_MANAGER_TERMINATED)
                        spinnerModel.setValue(lifeCycleStates[4]);
                    
                    return;
        }
        appData = findApplication((String)jComboBox1.getSelectedItem());
        if (appData == null) {
            appData = findSecurityDomain((String)jComboBox1.getSelectedItem());
        }
        if (appData != null) {
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE.setSelected(true);
            if ((appData.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN) != 0)
                jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN.setSelected(true);
            
            String[] lifeCycleStates = {"LIFE_CYCLE_APPLICATION_INSTALLED", "LIFE_CYCLE_APPLICATION_SELECTABLE",
                    "LIFE_CYCLE_APPLICATION_PERSONALIZED", "LIFE_CYCLE_APPLICATION_LOCKED",
                    "LIFE_CYCLE_APPLICATION_BLOCKED", "LIFE_CYCLE_APPLICATION_LOGICALLY_DELETED"};
                    spinnerModel.setList(java.util.Arrays.asList(lifeCycleStates));
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_BLOCKED)
                        spinnerModel.setValue(lifeCycleStates[4]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_INSTALLED)
                        spinnerModel.setValue(lifeCycleStates[0]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_LOCKED)
                        spinnerModel.setValue(lifeCycleStates[3]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_PERSONALIZED)
                        spinnerModel.setValue(lifeCycleStates[2]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_SELECTABLE)
                        spinnerModel.setValue(lifeCycleStates[1]);
                    if (appData.lifeCycleState == OPSPApplet.OPSP_LIFE_CYCLE_APPLICATION_LOGICALLY_DELETED)
                        spinnerModel.setValue(lifeCycleStates[5]);
                    
                    return;
        }
        appData = findLoadFiles((String)jComboBox1.getSelectedItem());
        if (appData != null) {
            
            String[] lifeCycleStates = {"LIFE_CYCLE_LOAD_FILE_LOGICALLY_DELETED", "LIFE_CYCLE_LOAD_FILE_LOADED"};
            spinnerModel.setList(java.util.Arrays.asList(lifeCycleStates));
            if ((appData.lifeCycleState & OPSPApplet.OPSP_LIFE_CYCLE_LOAD_FILE_LOADED) != 0)
                spinnerModel.setValue(lifeCycleStates[1]);
            if ((appData.lifeCycleState & OPSPApplet.OPSP_LIFE_CYCLE_LOAD_FILE_LOGICALLY_DELETED) != 0)
                spinnerModel.setValue(lifeCycleStates[0]);
            
            return;
        }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    private void jButtonGetStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetStatusActionPerformed
        parent.refreshStatus();
    }//GEN-LAST:event_jButtonGetStatusActionPerformed
    
    public void refresh() {
        byte cardElement;
        OPSPApplicationData[] loadFiles = null;
        OPSPApplicationData[] cardManager = null;
        OPSPApplicationData[] applications = null;
        parent.session.cardManager.clear();
        parent.session.loadFiles.clear();
        parent.session.applications.clear();
        parent.session.securityDomains.clear();
        jComboBox1.removeAllItems();
        try {
            cardElement = OPSPApplet.OPSP_STATUS_CARD_MANAGER;
            Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                    OPSPCardConnectionInfo.class, Byte.TYPE};
                    Object parameters[] = new Object[] {parent.session.cardHandle,
                    parent.session.secInfo, parent.session.cardInfo, cardElement};
                            
                            cardManager = (OPSPApplicationData[])WaitForMethodJDialog.showDialog(parent,
                                    "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "getStatus", null, parameterTypes, parameters);
        } catch (OPSPException e) {
            if (e.getExceptionCode() != OPSPException.OPSP_ISO7816_ERROR_DATA_NOT_FOUND) {
                javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                        "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            cardElement = OPSPApplet.OPSP_STATUS_LOAD_FILES;
            Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                    OPSPCardConnectionInfo.class, Byte.TYPE};
                    Object parameters[] = new Object[] {parent.session.cardHandle,
                    parent.session.secInfo, parent.session.cardInfo, cardElement};
                            
                            loadFiles = (OPSPApplicationData[])WaitForMethodJDialog.showDialog(parent,
                                    "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "getStatus", null, parameterTypes, parameters);
        } catch (OPSPException e) {
            if (e.getExceptionCode() != OPSPException.OPSP_ISO7816_ERROR_DATA_NOT_FOUND) {
                javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                        "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            cardElement = OPSPApplet.OPSP_STATUS_APPLICATIONS;
            Class parameterTypes[] = new Class[] {Long.TYPE, OPSPSecurityInfo.class,
                    OPSPCardConnectionInfo.class, Byte.TYPE};
                    Object parameters[] = new Object[] {parent.session.cardHandle,
                    parent.session.secInfo, parent.session.cardInfo, cardElement};
                            
                            applications = (OPSPApplicationData[])WaitForMethodJDialog.showDialog(parent,
                                    "org.dyndns.widerstand.OpenPlatform.OPSPWrapper", "getStatus", null, parameterTypes, parameters);
        } catch (OPSPException e) {
            if (e.getExceptionCode() != OPSPException.OPSP_ISO7816_ERROR_DATA_NOT_FOUND) {
                javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                        "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Generel Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (cardManager != null) {
            parent.session.cardManager.addAll(
                    java.util.Arrays.asList(cardManager));
        }
        if (loadFiles != null) {
            parent.session.loadFiles.addAll(
                    java.util.Arrays.asList(loadFiles));
        }
        if (applications != null) {
            for (OPSPApplicationData application : applications) {
                if ((application.privileges & OPSPApplet.OPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN) != 0)
                    parent.session.applications.add(application);
                else
                    parent.session.applications.add(application);
            }
        }       
        for (OPSPApplicationData app : parent.session.cardManager) {
            jComboBox1.addItem(OPSPUtil.toHexString(app.getAID()));
        }
        for (OPSPApplicationData app : parent.session.loadFiles) {
            jComboBox1.addItem(OPSPUtil.toHexString(app.getAID()));
        }
        for (OPSPApplicationData app : parent.session.securityDomains) {
            jComboBox1.addItem(OPSPUtil.toHexString(app.getAID()));
        }
        for (OPSPApplicationData app : parent.session.applications) {
            jComboBox1.addItem(OPSPUtil.toHexString(app.getAID()));
        }
        jButtonSetStatus.setEnabled(true);
    }
    
    private OPSPApplicationData findCardManager(String AID) {
        for (OPSPApplicationData app : parent.session.cardManager) {
            if (AID.equals(OPSPUtil.toHexString(app.getAID())))
                return app;
        }
        return null;
    }
    
    private OPSPApplicationData findLoadFiles(String AID) {
        for (OPSPApplicationData app : parent.session.loadFiles) {
            if (AID.equals(OPSPUtil.toHexString(app.getAID())))
                return app;
        }
        return null;
    }
    
    private OPSPApplicationData findSecurityDomain(String AID) {
        for (OPSPApplicationData app : parent.session.securityDomains) {
            if (AID.equals(OPSPUtil.toHexString(app.getAID())))
                return app;
        }
        return null;
    }
    
    private OPSPApplicationData findApplication(String AID) {
        for (OPSPApplicationData app : parent.session.applications) {
            if (AID.equals(OPSPUtil.toHexString(app.getAID())))
                return app;
        }
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGetStatus;
    private javax.swing.JButton jButtonSetStatus;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_LOCK_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_CARD_MANAGER_TERMINATE_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DAP_VERIFICATION;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DEFAULT_SELECTED;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_DELEGATED_MANAGEMENT;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_MANDATED_DAP_VERIFICATION;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_PIN_CHANGE_PRIVILEGE;
    private javax.swing.JCheckBox jCheckBoxOPSP_APPLICATION_PRIVILEGE_SECURITY_DOMAIN;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAID;
    private javax.swing.JLabel jLabelLifeCycleState;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerLifeCycleState;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
}
