/*
 * ConnectJPanel.java
 *
 * Created on 19. Februar 2005, 05:43
 */

package org.dyndns.widerstand.openplatformmanager;

import org.dyndns.widerstand.OpenPlatform.*;
import javax.swing.*;
import java.io.*;

/**
 *
 * @author  Widerstand
 */
public class ConnectJPanel extends javax.swing.JPanel {
    
    private MainJFrame parent;
    private SwingUtil swingUtil;
    
    /** Creates new form ConnectJPanel */
    public ConnectJPanel(MainJFrame parent) {
        this.parent = parent;
        swingUtil = new SwingUtil();
        initComponents();
        jPasswordENCKey.setText(OPSPUtil.toHexString(OPSPSecurityInfo.encKey));
        jPasswordMACKey.setText(OPSPUtil.toHexString(OPSPSecurityInfo.macKey));
        jPasswordKEKKey.setText(OPSPUtil.toHexString(OPSPSecurityInfo.kekKey));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxProtocol0 = new javax.swing.JCheckBox();
        jCheckBoxProtocol1 = new javax.swing.JCheckBox();
        jComboBoxReader = new javax.swing.JComboBox();
        jLabelReader = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabelsecurityDomainAID = new javax.swing.JLabel();
        jCheckBoxDefaultSelected = new javax.swing.JCheckBox();
        jTextFieldsecurityDomainAID = new javax.swing.JTextField();
        jButtonENCKey = new javax.swing.JButton();
        jLabelENCKey = new javax.swing.JLabel();
        jLabelMACKey = new javax.swing.JLabel();
        jButtonMACKey = new javax.swing.JButton();
        jPasswordENCKey = new javax.swing.JPasswordField();
        jPasswordMACKey = new javax.swing.JPasswordField();
        jCheckBoxENCKey = new javax.swing.JCheckBox();
        jCheckBoxMACKey = new javax.swing.JCheckBox();
        jLabelKEKKey = new javax.swing.JLabel();
        jPasswordKEKKey = new javax.swing.JPasswordField();
        jButtonKEKKey = new javax.swing.JButton();
        jCheckBoxKEKKey = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jRadioButtonMac = new javax.swing.JRadioButton();
        jRadioButtonClear = new javax.swing.JRadioButton();
        jRadioButtonEncMac = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jLabelKeyIndex = new javax.swing.JLabel();
        jTextFieldKeySetVersion = new javax.swing.JTextField();
        jLabelKeySetversion = new javax.swing.JLabel();
        jTextFieldKeyIndex = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jButtonConnect = new javax.swing.JButton();
        jButtonDisconnect = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Connect to Reader"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Reader Parameters"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jCheckBoxProtocol0.setSelected(true);
        jCheckBoxProtocol0.setText("Communication Protocol 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jCheckBoxProtocol0, gridBagConstraints);

        jCheckBoxProtocol1.setText("Communication Protocol 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jCheckBoxProtocol1, gridBagConstraints);

        jComboBoxReader.setMinimumSize(new java.awt.Dimension(27, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jComboBoxReader, gridBagConstraints);

        jLabelReader.setText("Reader");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabelReader, gridBagConstraints);

        jLabel1.setText("                                                                                 ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Secure Channel Parameters"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel8.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Authenticate to Domain"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelsecurityDomainAID.setText("Security Domain AID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jLabelsecurityDomainAID, gridBagConstraints);

        jCheckBoxDefaultSelected.setSelected(true);
        jCheckBoxDefaultSelected.setText("Authenticate to Default Selected");
        jCheckBoxDefaultSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDefaultSelectedActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jCheckBoxDefaultSelected, gridBagConstraints);

        jTextFieldsecurityDomainAID.setColumns(20);
        jTextFieldsecurityDomainAID.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jTextFieldsecurityDomainAID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPanel8, gridBagConstraints);

        jButtonENCKey.setText("Load Key");
        jButtonENCKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonENCKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jButtonENCKey, gridBagConstraints);

        jLabelENCKey.setText("ENC Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelENCKey, gridBagConstraints);

        jLabelMACKey.setText("MAC Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelMACKey, gridBagConstraints);

        jButtonMACKey.setText("Load Key");
        jButtonMACKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMACKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jButtonMACKey, gridBagConstraints);

        jPasswordENCKey.setColumns(47);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPasswordENCKey, gridBagConstraints);

        jPasswordMACKey.setColumns(47);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPasswordMACKey, gridBagConstraints);

        jCheckBoxENCKey.setText("Display as Cleartext");
        jCheckBoxENCKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxENCKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxENCKey, gridBagConstraints);

        jCheckBoxMACKey.setText("Display as Cleartext");
        jCheckBoxMACKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMACKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxMACKey, gridBagConstraints);

        jLabelKEKKey.setText("KEK Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabelKEKKey, gridBagConstraints);

        jPasswordKEKKey.setColumns(47);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPasswordKEKKey, gridBagConstraints);

        jButtonKEKKey.setText("Load Key");
        jButtonKEKKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKEKKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jButtonKEKKey, gridBagConstraints);

        jCheckBoxKEKKey.setText("Display as Cleartext");
        jCheckBoxKEKKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxKEKKeyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jCheckBoxKEKKey, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Security Level"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        buttonGroup1.add(jRadioButtonMac);
        jRadioButtonMac.setText("MAC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jRadioButtonMac, gridBagConstraints);

        buttonGroup1.add(jRadioButtonClear);
        jRadioButtonClear.setText("Plain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jRadioButtonClear, gridBagConstraints);

        buttonGroup1.add(jRadioButtonEncMac);
        jRadioButtonEncMac.setSelected(true);
        jRadioButtonEncMac.setText("ENC + MAC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jRadioButtonEncMac, gridBagConstraints);

        jPanel4.add(jPanel5);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("Key Set Parameters"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        jLabelKeyIndex.setText("Key Set Version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabelKeyIndex, gridBagConstraints);

        jTextFieldKeySetVersion.setColumns(4);
        jTextFieldKeySetVersion.setText("0x00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldKeySetVersion, gridBagConstraints);

        jLabelKeySetversion.setText("Key Index");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabelKeySetversion, gridBagConstraints);

        jTextFieldKeyIndex.setColumns(4);
        jTextFieldKeyIndex.setText("0x00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jTextFieldKeyIndex, gridBagConstraints);

        jPanel4.add(jPanel6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel7.add(jButtonConnect, gridBagConstraints);

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel7.add(jButtonDisconnect, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel7, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        add(jScrollPane1, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents
    
    private void jCheckBoxDefaultSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDefaultSelectedActionPerformed
        if (jCheckBoxDefaultSelected.isSelected()) {
            jTextFieldsecurityDomainAID.setEnabled(false);
        } else {
            jTextFieldsecurityDomainAID.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxDefaultSelectedActionPerformed
    
    private void jButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectActionPerformed
        try {
            OPSPWrapper.cardDisconnect(parent.session.cardHandle);
            parent.session.cardHandle = 0;
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        parent.disableAfterDisconnect();
    }//GEN-LAST:event_jButtonDisconnectActionPerformed
    
    private void jButtonKEKKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKEKKeyActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        byte kekKey[];
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                kekKey = OPSPUtil.load3DES(fc.getSelectedFile());
                jPasswordKEKKey.setText(OPSPUtil.toHexString(kekKey));
            } catch (IOException e) {
                swingUtil.errorInJComponent(this, jPasswordKEKKey,
                        e.getMessage(), "I/O Error");
            }
        }
    }//GEN-LAST:event_jButtonKEKKeyActionPerformed
    
    private void jButtonMACKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMACKeyActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        byte macKey[];
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                macKey = OPSPUtil.load3DES(fc.getSelectedFile());
                jPasswordMACKey.setText(OPSPUtil.toHexString(macKey));
            } catch (IOException e) {
                swingUtil.errorInJComponent(this, jPasswordMACKey,
                        e.getMessage(), "I/O Error");
            }
        }
    }//GEN-LAST:event_jButtonMACKeyActionPerformed
    
    private void jButtonENCKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonENCKeyActionPerformed
        final JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(this);
        byte encKey[];
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                encKey = OPSPUtil.load3DES(fc.getSelectedFile());
                jPasswordENCKey.setText(OPSPUtil.toHexString(encKey));
            } catch (IOException e) {
                swingUtil.errorInJComponent(this, jPasswordENCKey,
                        e.getMessage(), "I/O Error");
            }
        }
    }//GEN-LAST:event_jButtonENCKeyActionPerformed
    
    private void jCheckBoxKEKKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxKEKKeyActionPerformed
        if (jCheckBoxKEKKey.isSelected())
            jPasswordKEKKey.setEchoChar('\0');
        else
            jPasswordKEKKey.setEchoChar('*');
    }//GEN-LAST:event_jCheckBoxKEKKeyActionPerformed
    
    public void enableAfterEstablishContext() {
        jComboBoxReader.removeAllItems();
        for (int i=0; i < parent.session.readers.size(); i++) {
            jComboBoxReader.addItem((String)parent.session.readers.get(i));
        }
    }
    
    public void disableAfterReleaseContext() {
    }
    
    public void enableAfterConnect() {
        jButtonDisconnect.setEnabled(true);
    }
    
    public void disableAfterDisconnect() {
        jButtonDisconnect.setEnabled(false);
    }
    
    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        swingUtil.resetJComponentColor();
        String reader;
        long protocol = 0;
        reader = (String)jComboBoxReader.getSelectedItem();
        if (jCheckBoxProtocol0.isSelected())
            protocol |= OPSPCardConnectionInfo.OPSP_CARD_PROTOCOL_T0;
        if (jCheckBoxProtocol1.isSelected())
            protocol |= OPSPCardConnectionInfo.OPSP_CARD_PROTOCOL_T1;
        byte[] encKey;
        try {
            encKey = OPSPUtil.bytesFromHexString(new String(jPasswordENCKey.getPassword()));
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jPasswordENCKey,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        byte[] macKey;
        try {
            macKey = OPSPUtil.bytesFromHexString(new String(jPasswordMACKey.getPassword()));
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jPasswordMACKey,
                    "Colored text field cannot be understood as Hex String", "Wrong Number Format");
            return;
        }
        byte securityLevel = 0;
        if (jRadioButtonClear.isSelected())
            securityLevel = OPSPSecurityInfo.OPSP_SECURITY_LEVEL_PLAIN;
        if (jRadioButtonEncMac.isSelected())
            securityLevel = OPSPSecurityInfo.OPSP_SECURITY_LEVEL_ENC_MAC;
        if (jRadioButtonMac.isSelected())
            securityLevel = OPSPSecurityInfo.OPSP_SECURITY_LEVEL_MAC;
        byte keyIndex;
        Short dummy;
        try {
            dummy = Short.decode(jTextFieldKeyIndex.getText());
            if (dummy > 255 || dummy < 0) 
                throw new NumberFormatException();
            keyIndex = dummy.byteValue();
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldKeyIndex,
                    "Colored text field cannot be understood as a correct Number", "Wrong Number Format");
            return;
        }
        byte keySetVersion;
        try {
            dummy = Short.decode(jTextFieldKeySetVersion.getText());
            if (dummy > 255 || dummy < 0) 
                throw new NumberFormatException();
            keySetVersion = dummy.byteValue();
        } catch (NumberFormatException e) {
            swingUtil.errorInJComponent(this, jTextFieldKeySetVersion,
                    "Colored text field cannot be understood as a correct Number", "Wrong Number Format");
            return;
        }
        byte securityDomainAID[] = null;
        if (!jCheckBoxDefaultSelected.isSelected()) {
            try {
                securityDomainAID = OPSPUtil.bytesFromHexString(jTextFieldsecurityDomainAID.getText());
            } catch (NumberFormatException e) {
                swingUtil.errorInJComponent(this, jTextFieldsecurityDomainAID,
                        "Colored text field cannot be understood as AID", "Wrong Number Format");
                return;
            }
        }
        try {
            try {
                OPSPWrapper.cardDisconnect(parent.session.cardHandle);
            } catch (OPSPException e) {
            } finally {
                parent.session.cardHandle = OPSPWrapper.cardConnect(parent.session.cardContext, reader, protocol);
                parent.session.cardInfo = OPSPWrapper.getCardStatus(parent.session.cardHandle);
                if (!jCheckBoxDefaultSelected.isSelected()) {
                    OPSPWrapper.selectApplication(parent.session.cardHandle, parent.session.cardInfo, 
                            securityDomainAID);
                }
                parent.session.secInfo = OPSPWrapper.mutualAuthentication(parent.session.cardHandle, encKey, macKey,
                        keySetVersion, keyIndex, parent.session.cardInfo, securityLevel);
            }
        } catch (OPSPException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Open Platform Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        parent.session.kekKey = OPSPUtil.bytesFromHexString(new String(jPasswordKEKKey.getPassword()));
        parent.enableAfterConnect();
    }//GEN-LAST:event_jButtonConnectActionPerformed
    
    private void jCheckBoxMACKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMACKeyActionPerformed
        if (jCheckBoxMACKey.isSelected())
            jPasswordMACKey.setEchoChar('\0');
        else
            jPasswordMACKey.setEchoChar('*');
    }//GEN-LAST:event_jCheckBoxMACKeyActionPerformed
    
    private void jCheckBoxENCKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxENCKeyActionPerformed
        if (jCheckBoxENCKey.isSelected())
            jPasswordENCKey.setEchoChar('\0');
        else
            jPasswordENCKey.setEchoChar('*');
    }//GEN-LAST:event_jCheckBoxENCKeyActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JButton jButtonENCKey;
    private javax.swing.JButton jButtonKEKKey;
    private javax.swing.JButton jButtonMACKey;
    private javax.swing.JCheckBox jCheckBoxDefaultSelected;
    private javax.swing.JCheckBox jCheckBoxENCKey;
    private javax.swing.JCheckBox jCheckBoxKEKKey;
    private javax.swing.JCheckBox jCheckBoxMACKey;
    private javax.swing.JCheckBox jCheckBoxProtocol0;
    private javax.swing.JCheckBox jCheckBoxProtocol1;
    private javax.swing.JComboBox jComboBoxReader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelENCKey;
    private javax.swing.JLabel jLabelKEKKey;
    private javax.swing.JLabel jLabelKeyIndex;
    private javax.swing.JLabel jLabelKeySetversion;
    private javax.swing.JLabel jLabelMACKey;
    private javax.swing.JLabel jLabelReader;
    private javax.swing.JLabel jLabelsecurityDomainAID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPasswordField jPasswordENCKey;
    private javax.swing.JPasswordField jPasswordKEKKey;
    private javax.swing.JPasswordField jPasswordMACKey;
    private javax.swing.JRadioButton jRadioButtonClear;
    private javax.swing.JRadioButton jRadioButtonEncMac;
    private javax.swing.JRadioButton jRadioButtonMac;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldKeyIndex;
    private javax.swing.JTextField jTextFieldKeySetVersion;
    private javax.swing.JTextField jTextFieldsecurityDomainAID;
    // End of variables declaration//GEN-END:variables
    
}
