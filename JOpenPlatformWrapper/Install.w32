Pre-requisite:

This will be a lot of work ...

1.	You need a Microsoft C/C++-Compiler including the libraries, includes and build tools.
	I have compiled with the compiler included in Visual Studio 6.0. You may also use the compiler
	included in Microsoft Visual Studio .NET 2003. But then maybe you will have problems with the portability,
	i.e. on systems without a installed .NET framework some libraries linked against are missing.

	For a free way to build you need:

	Microsoft Visual C++ Toolkit 2003
	http://msdn.microsoft.com/visualc/vctoolkit2003/

	to get a compiler C/C++ compiler suite.

	Windows® Server 2003 SP1 Platform SDK
	http://www.microsoft.com/downloads/details.aspx?familyid=EBA0128F-A770-45F1-86F3-7AB010B398A3&displaylang=en

	to get the libraries for linking and include files for compiling and nmake for the makefile.

	NET Framework SDK Version 1.1
	http://www.microsoft.com/downloads/details.aspx?familyid=EBA0128F-A770-45F1-86F3-7AB010B398A3&displaylang=en

	to get the file msvcrt.lib. This is a necessary runtime library, but it is not included in the two above.
	Copy this file to the lib directory of Windows® Server 2003 SP1 Platform SDK.

Installation:

Keep in mind, that all applications should be compiled and linked with the same debugging properties
and against the same libraries. That means if you have downloaded a pre-built version of the pthread
library, then you also have to build a release version.

1.	Set the environment (This are include files and libraries and programms of the building environment)
	for compilation and open a command prompt. If you have Microsoft Visual Studio 6.0
	or .NET 2003 there is a file vcvars32.bat which does this for you
	and opens a command prompt.
	If you have installed Microsoft Visual C++ Toolkit 2003 and the
	Windows Server 2003 SP1 Platform SDK then change into the the Microsoft Platform SDK directory, open a
	console and run the SetEnv.Cmd. Now change into the Microsoft Visual C++ Toolkit directory and run
	vcvars32.bat. Now you should have a environment with the necessary tools, include and library directories.

2. 	Change into this directory.

3. 	Run nmake -f Makefile.mak to build a release version without debugging information.
	or run nmake -f Makefile.mak DEBUG= to build a debug version with debugging information.
	There are some arguments which are displayed in the beginning of the makefile. You
	can change them if you specify them on the command line or in the makefile.

	This arguments are:

	OP_INC       - The path to the headers of OpenPlatform
	OP_LIB       - The path to the link library (.lib) of OpenPlatform
	JAVA_INC     - Path to the JAVA header files
	JAVA_INC_W32 - Path to the JAVA W32 header files

	E.g. nmake -f Makefile.mak OP_INC=C:\Program Files\OpenPlatform\include
	OP_LIB=C:\Program Files\OpenPlatform\libraries JAVA_INC=E:\Program Files\jdk1.5.0_01\include
	JAVA_INC_W32=E:\Program Files\jdk1.5.0_01\include\win32

4.	Copy the JOpenPlatformWrapper.dll library from the Release or Debug directory to a location,
	where the application(s) using it can find it. This is a directory included in the
	%PATH% environment, usually at least e.g. Windows\System32

5.	(optional)
	Run nmake -f Makefile.mak clean to delete the Debug and Release directories.

For question visit:

http://sourceforge.net/projects/globalplatform/

